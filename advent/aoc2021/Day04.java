package advent.aoc2021;

import java.util.Arrays;
import java.util.List;

import advent.utilities.general.DayRunner;
import advent.utilities.general.IDay;

public class Day04 implements IDay {

	String input = "67,3,19,4,64,39,85,14,84,93,79,26,61,24,65,63,15,69,48,8,82,75,36,96,16,49,28,40,97,38,76,91,83,7,62,94,21,95,6,10,43,17,31,34,81,23,52,60,54,29,70,12,35,0,57,45,20,71,78,44,90,2,33,68,53,92,50,73,88,47,58,5,9,87,22,13,18,30,59,56,99,11,77,55,72,32,37,89,42,27,66,41,86,51,74,1,46,25,98,80\r\n"
			+ "\r\n"
			+ "24 75 59 41 17\r\n"
			+ "58 74 64 92 39\r\n"
			+ "68  8 78 85 72\r\n"
			+ "18  3 22  4 34\r\n"
			+ "11 76  6 28 50\r\n"
			+ "\r\n"
			+ "21 31 36 13 87\r\n"
			+ "80 91 63 62 77\r\n"
			+ "46 93 40 16 25\r\n"
			+ "47 66 30 54 74\r\n"
			+ "56 59 86 72 37\r\n"
			+ "\r\n"
			+ "92 43 68 60 81\r\n"
			+ " 3 78 75 73 12\r\n"
			+ "90 50 31 67 76\r\n"
			+ "28 63 52 95 61\r\n"
			+ " 6 38 79 19 17\r\n"
			+ "\r\n"
			+ "81 20 61 60 86\r\n"
			+ "43 27 50 21 85\r\n"
			+ "77 84 68 76 24\r\n"
			+ "33 13 89  1 48\r\n"
			+ " 6 57 30 11  5\r\n"
			+ "\r\n"
			+ "66 24 22 86  2\r\n"
			+ "67 77 72 88 87\r\n"
			+ "21 60 89 36 32\r\n"
			+ "39 37 29 17 31\r\n"
			+ "78 97 63 94 91\r\n"
			+ "\r\n"
			+ "85 71 86 16 54\r\n"
			+ "98 11 82 89 17\r\n"
			+ "38 23 99 59 69\r\n"
			+ "58 12 74 15 93\r\n"
			+ "41  5 52 48 26\r\n"
			+ "\r\n"
			+ " 3 32 61 29 27\r\n"
			+ "98 74 34 58 23\r\n"
			+ "24 54 76 79 88\r\n"
			+ "71 90 97 96 68\r\n"
			+ "21 33 72 47 82\r\n"
			+ "\r\n"
			+ "13 70 59  7 91\r\n"
			+ "74 88 85 50 15\r\n"
			+ "35  8 40 93  6\r\n"
			+ "95 29 52 18 99\r\n"
			+ "57 64  0  9 39\r\n"
			+ "\r\n"
			+ "72  6 74 64  0\r\n"
			+ "73  9 46 52 98\r\n"
			+ "81 68 14 69 48\r\n"
			+ "25 17  5 54 19\r\n"
			+ "11 47 33 23 62\r\n"
			+ "\r\n"
			+ "45 14 90 59 97\r\n"
			+ "43 46 58 55 29\r\n"
			+ "80 53  2 37 78\r\n"
			+ "40 79 57 52 72\r\n"
			+ "92 13 54 25 19\r\n"
			+ "\r\n"
			+ "39 78 99 84  2\r\n"
			+ "80 53 24 51  5\r\n"
			+ "33 20 48 43 66\r\n"
			+ "82 13 52 30 98\r\n"
			+ "14 16 26 44 74\r\n"
			+ "\r\n"
			+ "38 35 45 83 94\r\n"
			+ "18 28 41 22 13\r\n"
			+ "44  9 10 98 58\r\n"
			+ "64 73 24 31 34\r\n"
			+ "39 85 50 77 63\r\n"
			+ "\r\n"
			+ "71 18 68 47 65\r\n"
			+ "25 40 82 69 44\r\n"
			+ "30  6 72 73  7\r\n"
			+ "80 24 41 79  2\r\n"
			+ "11 20 96 84 54\r\n"
			+ "\r\n"
			+ "16  6 38 75 25\r\n"
			+ "56  2 51 69 81\r\n"
			+ "15 54 91 85 90\r\n"
			+ "94  0  7 71 30\r\n"
			+ "28 17 76 67 31\r\n"
			+ "\r\n"
			+ "13 12 23  7 71\r\n"
			+ "91 89 84 40 78\r\n"
			+ "44 83 90 21 31\r\n"
			+ "77 17  3 95 42\r\n"
			+ "87 82 38 30 67\r\n"
			+ "\r\n"
			+ "44 64 60 76 36\r\n"
			+ "21 39 86 89 34\r\n"
			+ " 5 54 24 14 58\r\n"
			+ "78 55 98 74 69\r\n"
			+ " 2 97 42 59 51\r\n"
			+ "\r\n"
			+ "51 35 78 54 40\r\n"
			+ " 9 52  5 66 19\r\n"
			+ "92 74 68 90 73\r\n"
			+ "76 11 60 67 22\r\n"
			+ "44  7  1 89 15\r\n"
			+ "\r\n"
			+ "93 72  3 95 13\r\n"
			+ "77  1 32 35  5\r\n"
			+ "68 91 98 23 51\r\n"
			+ "59 19 31 57 56\r\n"
			+ "54 46 92 88 26\r\n"
			+ "\r\n"
			+ "84 91 40  9 73\r\n"
			+ "90 41 51 12 10\r\n"
			+ " 0 61 89 13  8\r\n"
			+ "62 74  5 45 92\r\n"
			+ "65 27 78 26 31\r\n"
			+ "\r\n"
			+ "54 21 32 84 42\r\n"
			+ "68 25 76  3 40\r\n"
			+ "24 15 59 12  2\r\n"
			+ "72 49 73 31 93\r\n"
			+ "35 67 70 60 91\r\n"
			+ "\r\n"
			+ "55 34 51 76 54\r\n"
			+ "73 28  5 87 52\r\n"
			+ "24 36 65 49 27\r\n"
			+ "99 10 12 44 50\r\n"
			+ "23 77 53 80  4\r\n"
			+ "\r\n"
			+ "30 42 92 11 40\r\n"
			+ "83 49 41 72 54\r\n"
			+ "73 97 18  4 37\r\n"
			+ " 0 15 70 55 33\r\n"
			+ "71 26 46 25 81\r\n"
			+ "\r\n"
			+ "22 35 41 71 58\r\n"
			+ "55 39 18 85 45\r\n"
			+ "79 44  9 38  2\r\n"
			+ "47  4 23 34 82\r\n"
			+ "49 63 88 81 29\r\n"
			+ "\r\n"
			+ "49 82 40 37 77\r\n"
			+ "17 45 92  7 65\r\n"
			+ "51 38 91 68 32\r\n"
			+ "73 57 69 85 50\r\n"
			+ "87 10 95 59  1\r\n"
			+ "\r\n"
			+ "57 27 95 59 87\r\n"
			+ "78 96 82 63 52\r\n"
			+ "39 17 14 74 21\r\n"
			+ "47 64 28 94 65\r\n"
			+ "40  3 49 25 61\r\n"
			+ "\r\n"
			+ "97  9 24 80 27\r\n"
			+ " 5 36 83 15 29\r\n"
			+ "86 33 32 61  2\r\n"
			+ "87 48 82 91  4\r\n"
			+ "35 10 16 85 65\r\n"
			+ "\r\n"
			+ "17 12 43 96  5\r\n"
			+ "36 76 29 51 73\r\n"
			+ "98 66 27 97 91\r\n"
			+ "78 28  2 61 30\r\n"
			+ "95 70 19 47 54\r\n"
			+ "\r\n"
			+ "98 88 51 32  7\r\n"
			+ "89 61 16 91 95\r\n"
			+ "94 23 19 77 70\r\n"
			+ "42 90 36 26 44\r\n"
			+ "99 71  5 57 13\r\n"
			+ "\r\n"
			+ "14 43 97 72 83\r\n"
			+ "39 73 58 16 59\r\n"
			+ "51  2 28 24 18\r\n"
			+ "40 70 65 27 91\r\n"
			+ " 4 44 68 74 56\r\n"
			+ "\r\n"
			+ "90  9 71 23 73\r\n"
			+ "11 95 62 36 38\r\n"
			+ "77 34 60 67 41\r\n"
			+ "28 48 98 40 42\r\n"
			+ "47 51 82 87 63\r\n"
			+ "\r\n"
			+ "19 41 57 61 50\r\n"
			+ "64 84  8 81 11\r\n"
			+ "83 68 31 66 90\r\n"
			+ " 2 72 71 96 79\r\n"
			+ "78 89 77 60  4\r\n"
			+ "\r\n"
			+ "73 88 72 23 68\r\n"
			+ "98 52 21 89 43\r\n"
			+ "48 29 10  8  6\r\n"
			+ "49  3 54 37 12\r\n"
			+ "83 34 51 77 66\r\n"
			+ "\r\n"
			+ "52 16 94 84 81\r\n"
			+ " 3 87 99 72 98\r\n"
			+ "48 10 44 32 22\r\n"
			+ " 9 69 36 74 62\r\n"
			+ "51 42 91 68 60\r\n"
			+ "\r\n"
			+ "39 54 16 97 14\r\n"
			+ "58 84 89 15 20\r\n"
			+ "67 49 19 55 86\r\n"
			+ "10 44 76 12 96\r\n"
			+ "74 36 51 41  2\r\n"
			+ "\r\n"
			+ "27 22 90 79 86\r\n"
			+ "47 73  2 53 58\r\n"
			+ "31 89 37 19 12\r\n"
			+ "20 83 87 23 30\r\n"
			+ "32  8 92 55 68\r\n"
			+ "\r\n"
			+ "19 39 64 53 12\r\n"
			+ "32  7 80 72 79\r\n"
			+ "82 96 21 13 40\r\n"
			+ "18 25 61  9 70\r\n"
			+ "84 95 42 36 52\r\n"
			+ "\r\n"
			+ "48 12 29 61  7\r\n"
			+ "34 13 99 98  6\r\n"
			+ "74 36 66 91 88\r\n"
			+ "75 85 93 80 83\r\n"
			+ "96 11 44 47 39\r\n"
			+ "\r\n"
			+ "79 43 28 16 75\r\n"
			+ "66 64 17 71 72\r\n"
			+ "36 30 19 60 38\r\n"
			+ " 1 13 77 69 94\r\n"
			+ "78  6 97 93 63\r\n"
			+ "\r\n"
			+ "86 45 14 38 37\r\n"
			+ "35 20 15 68 55\r\n"
			+ "92  3  0 90  8\r\n"
			+ "88 32 87 17 22\r\n"
			+ "33 34 78 13 43\r\n"
			+ "\r\n"
			+ "87 92 58 95  6\r\n"
			+ "35 23 54 40 97\r\n"
			+ "82 64 88 10 94\r\n"
			+ "63  8 26 98 18\r\n"
			+ "42 76 39 50 51\r\n"
			+ "\r\n"
			+ "75 13  4 72 95\r\n"
			+ "11 50 15 47 52\r\n"
			+ "12 73 80 74 70\r\n"
			+ "68 30 21 37 58\r\n"
			+ "91  2 24 32 82\r\n"
			+ "\r\n"
			+ "76 66  4 68 79\r\n"
			+ "19 73 24 51 96\r\n"
			+ "16 52 26 78  7\r\n"
			+ "48 30 17 82 92\r\n"
			+ "28 88 90 71 59\r\n"
			+ "\r\n"
			+ "95 18 69 85 63\r\n"
			+ "16 78 97 10 41\r\n"
			+ "53 98 73 87 19\r\n"
			+ "15 35 94 57 82\r\n"
			+ "48 40 14  3 38\r\n"
			+ "\r\n"
			+ "39 40 78 64 87\r\n"
			+ "90 69 83 18 16\r\n"
			+ "58 91 36 23 74\r\n"
			+ "25 51 99  4 76\r\n"
			+ "62 10 88  2  1\r\n"
			+ "\r\n"
			+ "72 95 34  2 84\r\n"
			+ "38 12 97 92 47\r\n"
			+ "24 23 41 10 75\r\n"
			+ "56 87 68 45 89\r\n"
			+ "14 85 52 98 79\r\n"
			+ "\r\n"
			+ "96 97 15 98 17\r\n"
			+ "76 13  6 38 81\r\n"
			+ "66 90 51 36 85\r\n"
			+ "95 48 40 99 94\r\n"
			+ "69 88 19  4  1\r\n"
			+ "\r\n"
			+ "20 36 93 50 35\r\n"
			+ "13 15  6 49 92\r\n"
			+ " 0 70 38 29 22\r\n"
			+ "68 34 73 89 71\r\n"
			+ " 5 10 12 79 31\r\n"
			+ "\r\n"
			+ "16 63 34 29  2\r\n"
			+ "43 57 18 51 67\r\n"
			+ "83 47 49 17 96\r\n"
			+ "84 33 40  7 50\r\n"
			+ "60 30 41 81 76\r\n"
			+ "\r\n"
			+ "86 85  4 48 61\r\n"
			+ "34 46 89 78 23\r\n"
			+ "83  8 43 57 30\r\n"
			+ "21 36  7 75 37\r\n"
			+ "29 40 62 60 54\r\n"
			+ "\r\n"
			+ "47 28 42 39 57\r\n"
			+ "16 46 54 52 55\r\n"
			+ "78 84 32 95 23\r\n"
			+ "27 26  9 75 62\r\n"
			+ "90 85  0 65 37\r\n"
			+ "\r\n"
			+ "89 46  4 81 55\r\n"
			+ "68 13 79 18 90\r\n"
			+ "57 73 21 15 32\r\n"
			+ "59 56 62 58 36\r\n"
			+ "45 98 64 33 12\r\n"
			+ "\r\n"
			+ "89 92  3 69 78\r\n"
			+ "45 50 12 71 72\r\n"
			+ "18 87 64 48 88\r\n"
			+ "84 77 53 17 62\r\n"
			+ "68  6 83 91  2\r\n"
			+ "\r\n"
			+ " 5 80 25 90 19\r\n"
			+ "21 86 66 69 61\r\n"
			+ "22 59 39 54 91\r\n"
			+ " 9 27 14 24 40\r\n"
			+ "95 74 18 63 11\r\n"
			+ "\r\n"
			+ "84 63 42 80 61\r\n"
			+ "23 39 49 92 25\r\n"
			+ "56 64 70  2 88\r\n"
			+ "99 29 15 26  9\r\n"
			+ "82 91 35  7 40\r\n"
			+ "\r\n"
			+ " 4 93 44 42 16\r\n"
			+ "78 72 32 73 81\r\n"
			+ "84 91 85 82 69\r\n"
			+ "88 49 59 92 96\r\n"
			+ "61 99 19 33 38\r\n"
			+ "\r\n"
			+ "87  2 46 16 83\r\n"
			+ "29 31 45 37 51\r\n"
			+ "25 65 26 89 19\r\n"
			+ "80 17 27  8 73\r\n"
			+ "54  4 76  0 12\r\n"
			+ "\r\n"
			+ "50 65 47 43 31\r\n"
			+ "58 94 90 71 12\r\n"
			+ "27  3 81 45  9\r\n"
			+ " 1 33 37 15 83\r\n"
			+ "96 26 41 77 57\r\n"
			+ "\r\n"
			+ "22 54 71 73  5\r\n"
			+ "64 77 15 98 38\r\n"
			+ "61 90 20 57 40\r\n"
			+ "60 18 83 72 12\r\n"
			+ "34 91 87 41 21\r\n"
			+ "\r\n"
			+ "82 29 51 16 61\r\n"
			+ "37 41 86 20 19\r\n"
			+ "59 30 43 15 53\r\n"
			+ "17 83  5 14 89\r\n"
			+ "78 70  1 12 62\r\n"
			+ "\r\n"
			+ "19 95 68 67 92\r\n"
			+ "14 70 73 62 29\r\n"
			+ "40  9 97 82 66\r\n"
			+ "11 50 77 47 53\r\n"
			+ "20 75 88 94 93\r\n"
			+ "\r\n"
			+ "48 39 62 56 44\r\n"
			+ "95 43 10 89 60\r\n"
			+ "40  0 73 17 59\r\n"
			+ "50  2  8  4  5\r\n"
			+ "24 79 20 13 96\r\n"
			+ "\r\n"
			+ "25 40 36 54 13\r\n"
			+ "46 48 37 71 26\r\n"
			+ "29 42 27 44 23\r\n"
			+ "24 61 79  3 90\r\n"
			+ "97 21 43 86 18\r\n"
			+ "\r\n"
			+ "95  4 14 12 71\r\n"
			+ "11 55 50 83 85\r\n"
			+ " 9 43 29 32 28\r\n"
			+ "78 20 63 87 40\r\n"
			+ "61 84 37 75 77\r\n"
			+ "\r\n"
			+ " 4 96 87 22  2\r\n"
			+ "95 70 39 35 49\r\n"
			+ "23 27 19 43  0\r\n"
			+ "42 75 36 52 11\r\n"
			+ "13  8 57 88 46\r\n"
			+ "\r\n"
			+ "37  5 87 58 86\r\n"
			+ "65 78 89 57 79\r\n"
			+ "70 40 14 80 97\r\n"
			+ "88 55 68 28 13\r\n"
			+ "53 59 24 26  1\r\n"
			+ "\r\n"
			+ " 5 95 59 71 23\r\n"
			+ "44 57 34 65 83\r\n"
			+ "49 93  9 77 28\r\n"
			+ "37 69 79 99 73\r\n"
			+ "17 27 33 66 85\r\n"
			+ "\r\n"
			+ "75 61 32  0 16\r\n"
			+ "65 59 47 25 81\r\n"
			+ "87 97  8 50 70\r\n"
			+ "78 34 38 42 51\r\n"
			+ "22 63  6 66  1\r\n"
			+ "\r\n"
			+ "65 68 77  1 19\r\n"
			+ "53 14  7 88  9\r\n"
			+ "11 22 40 25 39\r\n"
			+ "69 93 37 72  5\r\n"
			+ "90 80 38 10 16\r\n"
			+ "\r\n"
			+ "15 81 62 68 44\r\n"
			+ "26 70 43 55 89\r\n"
			+ "22 69  8 94 51\r\n"
			+ "52 19 79 96 10\r\n"
			+ "24 48 63 74 84\r\n"
			+ "\r\n"
			+ "36  9 57  4 40\r\n"
			+ "95 98 58 70 87\r\n"
			+ "45 97 92 23 86\r\n"
			+ " 6 31 15 78 12\r\n"
			+ "90 75 48 41  3\r\n"
			+ "\r\n"
			+ "34 97 31 92 20\r\n"
			+ "59  6 89 79 70\r\n"
			+ "39 90 16 72 91\r\n"
			+ "76 75 85 47 68\r\n"
			+ "86 62 32 19 64\r\n"
			+ "\r\n"
			+ "44  5 72 25 32\r\n"
			+ "87 18 93 33  0\r\n"
			+ "22 96 46  4 28\r\n"
			+ "61 81 77 52 80\r\n"
			+ "66 24 63 23 45\r\n"
			+ "\r\n"
			+ "53 33 99 31 75\r\n"
			+ "60 39 56 89 57\r\n"
			+ "76 81 14 95 23\r\n"
			+ " 8 19 98 13  5\r\n"
			+ "49 91 54 47  7\r\n"
			+ "\r\n"
			+ "11 58 44  6 94\r\n"
			+ "31 87 50 77 22\r\n"
			+ "49  9 40 24 60\r\n"
			+ "86 36 12  3 71\r\n"
			+ "59 99 68 20 66\r\n"
			+ "\r\n"
			+ "83 11 93 36  6\r\n"
			+ "73 55 97 48 18\r\n"
			+ " 3 43 51 90 57\r\n"
			+ "38 65 39 95 68\r\n"
			+ "94 24 59 20 34\r\n"
			+ "\r\n"
			+ "53 57 69  3 16\r\n"
			+ " 2 91 22 24 26\r\n"
			+ "44 84 31 28 82\r\n"
			+ "46 94 65 78 99\r\n"
			+ "55 49 11 66 21\r\n"
			+ "\r\n"
			+ "10 53 20 69 41\r\n"
			+ "70 12 56  2 94\r\n"
			+ "87 23 74 60 55\r\n"
			+ "59 67 18 38 22\r\n"
			+ "71  4 51 81 39\r\n"
			+ "\r\n"
			+ "59 32 64 66 53\r\n"
			+ "20 11 27 10 81\r\n"
			+ "41 93 12 45 99\r\n"
			+ "70 94 77 16 76\r\n"
			+ "30 79 57  0 90\r\n"
			+ "\r\n"
			+ "84  8 76 13 98\r\n"
			+ "96  1  9 65 38\r\n"
			+ "23 30 64  3 95\r\n"
			+ "70 26 34 86 79\r\n"
			+ " 2 22 77 41 68\r\n"
			+ "\r\n"
			+ "77 11 55 80 21\r\n"
			+ "45 70 28  0 57\r\n"
			+ "38 74 33 86 22\r\n"
			+ "42 13 66 61 83\r\n"
			+ "46 94  7 82 40\r\n"
			+ "\r\n"
			+ "53 68 94 71 64\r\n"
			+ "44 99 86 66 97\r\n"
			+ "80 33 48 74 45\r\n"
			+ "29 13 11 15 62\r\n"
			+ "36 89  9 47 56\r\n"
			+ "\r\n"
			+ "49 90 16 55 14\r\n"
			+ "68 13 27 47 46\r\n"
			+ "54 93 97 10 31\r\n"
			+ "33 58  6 83 48\r\n"
			+ "63 28 95  8 62\r\n"
			+ "\r\n"
			+ "72 60 12 24 20\r\n"
			+ " 1 22 90 58 65\r\n"
			+ "84  5 96 80 33\r\n"
			+ "64 15 47 23 46\r\n"
			+ "63 36  6 31 91\r\n"
			+ "\r\n"
			+ "19 27 96 54 36\r\n"
			+ "33 32 65 11 26\r\n"
			+ " 0 47 25 59 56\r\n"
			+ "41 45 76 14 98\r\n"
			+ "52 22 31 66 38\r\n"
			+ "\r\n"
			+ " 7 91  5 18 14\r\n"
			+ " 4 19 54 42 71\r\n"
			+ "31 82 81 61 39\r\n"
			+ "58 51 70 10 55\r\n"
			+ "43 60 15 89 21\r\n"
			+ "\r\n"
			+ "85 31 75 55 76\r\n"
			+ "92 93 54 98 44\r\n"
			+ "21 22  6 79 20\r\n"
			+ "34 64  7 82 78\r\n"
			+ "53 36 96 37 19\r\n"
			+ "\r\n"
			+ "84 58 35 68 76\r\n"
			+ "79 91 92 25 29\r\n"
			+ "93 83 23 22 80\r\n"
			+ "51 28 53 60 40\r\n"
			+ " 0 62 77 49 39\r\n"
			+ "\r\n"
			+ "35 38 24 88 53\r\n"
			+ "61 30 52 49 83\r\n"
			+ "20 97  6 16 55\r\n"
			+ "60 43 14 67  4\r\n"
			+ "66  9 85 28 77\r\n"
			+ "\r\n"
			+ "73 57 65 36 50\r\n"
			+ "18 94 14 59 67\r\n"
			+ " 7 78 40  6 13\r\n"
			+ "86 49  5 22 66\r\n"
			+ "63 32 68 44 80\r\n"
			+ "\r\n"
			+ "52 95 93 25 16\r\n"
			+ " 0 83 41 77 49\r\n"
			+ "13 63 65 84 69\r\n"
			+ "51  9 39 47 24\r\n"
			+ "92  4 14  8 66\r\n"
			+ "\r\n"
			+ "70 31 33 69 50\r\n"
			+ "36 29 76 56 64\r\n"
			+ "97 11 40 19 81\r\n"
			+ "18 57 10 24 15\r\n"
			+ "30 44 42 89 60\r\n"
			+ "\r\n"
			+ "42 97  9 38 60\r\n"
			+ "48 62 53 70 27\r\n"
			+ "49 72 90 86 18\r\n"
			+ "69 50  8 78 84\r\n"
			+ "28 13 17 10 35\r\n"
			+ "\r\n"
			+ "84  7 60 17 36\r\n"
			+ "30  1  3 89 49\r\n"
			+ "45 10 85 97 76\r\n"
			+ "31 38 16  2 12\r\n"
			+ "43 58 11 77 78\r\n"
			+ "\r\n"
			+ "53 20 98 94 82\r\n"
			+ "54 62 27 92 83\r\n"
			+ "60 41 66  5 30\r\n"
			+ "58 15 90 88  3\r\n"
			+ "38 45  7 26 37\r\n"
			+ "\r\n"
			+ "62 94 17 55 28\r\n"
			+ "27 86 26 42 87\r\n"
			+ "90 18 84 20 85\r\n"
			+ "92 97 59 83  0\r\n"
			+ "89 21 25 36 11\r\n"
			+ "\r\n"
			+ "89 60 41 91 54\r\n"
			+ "16  9 57 40 53\r\n"
			+ "87 56 64 23 27\r\n"
			+ "13 42 84  2 52\r\n"
			+ "66 77 80  0 38\r\n"
			+ "\r\n"
			+ "58 23 55 96 75\r\n"
			+ "56  8 19 52 10\r\n"
			+ "98 13 70 62 73\r\n"
			+ " 6 64 86  4 12\r\n"
			+ "51 91 93 29 34\r\n"
			+ "\r\n"
			+ "55  8 99 51 70\r\n"
			+ "33 30 52 58 10\r\n"
			+ "38 31 87  9 61\r\n"
			+ "63 46 15 48 24\r\n"
			+ "32 94 40 74 21\r\n"
			+ "\r\n"
			+ " 5 70 26 48 28\r\n"
			+ "41 35 93 34 44\r\n"
			+ "46 86 19  0 27\r\n"
			+ " 7 81 51 95 15\r\n"
			+ "36 84 76 75 92\r\n"
			+ "\r\n"
			+ "34  0 31 21  3\r\n"
			+ "23 96 49 51 11\r\n"
			+ "42 27 47 66 91\r\n"
			+ "93 89 16 62 54\r\n"
			+ "22 71 26 32 99";
	
	@Override
	public String part1() {
		String[] boards = input.split("\r\n\r\n");
		//first string in boards is numbers - parse to list
		List<Integer> numberOrder = Arrays.stream(boards[0].split(",")).map(x -> Integer.parseInt(x)).toList();
		
		//rather than go over numbers and slowly mark boards, go over each board and determine how long it will take to produce a bingo
		int earliestBingo = Integer.MAX_VALUE;
		List<Integer> bestBoard = null;
		for(int i = 1; i < boards.length; i++) {
			//store board as a flat number list - we can still access rows and columns pretty easily
			List<Integer> board = Arrays.stream(boards[i].trim().split("  | |\r\n |\r\n")).map(x -> Integer.parseInt(x)).toList();
			
			int boardBestBingo = Integer.MAX_VALUE;
			//row loop
			//start at index j, then get it and next four values for "row". j then increases by five
			for(int j = 0; j < board.size(); j += 5) {
				int highestOfRow = 0;
				for(int k = 0; k < 5; k++) {
					int bingoNumber = board.get(j+k);
					//time number is called is index in numberOrder
					highestOfRow = Math.max(highestOfRow, numberOrder.indexOf(bingoNumber));
				}
				boardBestBingo = Math.min(boardBestBingo, highestOfRow);
			}
			
			//col loop
			//start at index j, then get it and every fifth number after
			for(int j = 0; j < 5; j++) {
				int highestOfCol = 0;
				for(int k = 0; k < board.size(); k += 5) {
					int bingoNumber = board.get(j+k);
					highestOfCol = Math.max(highestOfCol, numberOrder.indexOf(bingoNumber));
				}
				boardBestBingo = Math.min(boardBestBingo, highestOfCol);
			}
				
			if(boardBestBingo < earliestBingo) {
				earliestBingo = boardBestBingo;
				bestBoard = board;
			}
		}
		
		//lastly, total unmarked numbers on board and multiply by last number called
		int total = 0;
		for(int i : bestBoard) {
			//if number is unmarked (not called till after bingo)
			if(numberOrder.indexOf(i) > earliestBingo)
				total += i;
		}
		
		//multiply by last number called
		total *= numberOrder.get(earliestBingo);
		
		return Integer.toString(total);
	}

	
	
	@Override
	public String part2() {
		String[] boards = input.split("\r\n\r\n");
		//first string in boards is numbers - parse to list
		List<Integer> numberOrder = Arrays.stream(boards[0].split(",")).map(x -> Integer.parseInt(x)).toList();
		
		//rather than go over numbers and slowly mark boards, go over each board and determine how long it will take to produce a bingo
		//simple change - now look for latest bingo
		//a board's first bingo still counts, but we want the "last" "first" bingo
		int latestBingo = 0;
		List<Integer> bestBoard = null;
		for(int i = 1; i < boards.length; i++) {
			//store board as a flat number list - we can still access rows and columns pretty easily
			List<Integer> board = Arrays.stream(boards[i].trim().split("  | |\r\n |\r\n")).map(x -> Integer.parseInt(x)).toList();
			
			int boardBestBingo = Integer.MAX_VALUE;
			//row loop
			//start at index j, then get it and next four values for "row". j then increases by five
			for(int j = 0; j < board.size(); j += 5) {
				int highestOfRow = 0;
				for(int k = 0; k < 5; k++) {
					int bingoNumber = board.get(j+k);
					//time number is called is index in numberOrder
					highestOfRow = Math.max(highestOfRow, numberOrder.indexOf(bingoNumber));
				}
				boardBestBingo = Math.min(boardBestBingo, highestOfRow);
			}
			
			//col loop
			//start at index j, then get it and every fifth number after
			for(int j = 0; j < 5; j++) {
				int highestOfCol = 0;
				for(int k = 0; k < board.size(); k += 5) {
					int bingoNumber = board.get(j+k);
					highestOfCol = Math.max(highestOfCol, numberOrder.indexOf(bingoNumber));
				}
				boardBestBingo = Math.min(boardBestBingo, highestOfCol);
			}
				
			if(boardBestBingo > latestBingo) {
				latestBingo = boardBestBingo;
				bestBoard = board;
			}
		}
		
		//lastly, total unmarked numbers on board and multiply by last number called
		int total = 0;
		for(int i : bestBoard) {
			//if number is unmarked (not called till after bingo)
			if(numberOrder.indexOf(i) > latestBingo)
				total += i;
		}
		
		//multiply by last number called
		total *= numberOrder.get(latestBingo);
		
		return Integer.toString(total);
	}

	public static void main(String[] args) {
		DayRunner.run(new Day04());
	}

}
