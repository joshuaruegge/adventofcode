package advent.aoc2020;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import advent.utilities.general.DayRunner;
import advent.utilities.general.IDay;

public class Day18 implements IDay {

	String input = "5 + 6 * 9 + 5 + 5 + (7 * 2)\r\n"
			+ "2 + (3 + 7 + 7) * 5 + 9 + (5 + (4 + 5 + 3 + 6) + 8 * 5 + (7 + 4 + 7 + 6 + 9) + 9)\r\n"
			+ "(5 * 4 + 7 + 4 + 8) + 9 * ((5 * 4) + 2 + (6 + 2 + 8 + 7 + 4 + 5)) * 5\r\n"
			+ "4 * ((4 + 9 + 3 * 3 * 5) * 3 + 2 + 2 * (9 * 2 + 3)) + 5 * ((8 * 3 * 6) + 9 * 4 + (5 + 4 * 7 + 7)) * 7 * (9 + 2 * 2)\r\n"
			+ "5 * 6 + ((8 + 9) * 5 * 9 + 4 + (9 + 3 * 9))\r\n"
			+ "(3 * (3 + 3) * 9 + (6 + 9 * 8) + 5) + 5\r\n"
			+ "6 * (9 * 6 * 9)\r\n"
			+ "4 * 3 + (9 + (8 * 2 * 3 * 4) * (6 * 8 + 5 + 3 + 4)) + (3 + 7 + (7 * 6 + 2) * 6 + (4 + 6 + 5) * (3 + 7)) + 6 * (8 * 6 + 7 * 8 * 9 + 2)\r\n"
			+ "5 * (2 + 3 * 4 + 3 + (4 * 4 + 3))\r\n"
			+ "9 * 2 * (5 * (8 * 7 * 3))\r\n"
			+ "(6 * 9) * 6 + 7 * 8 + 5\r\n"
			+ "5 * 4 * 9 + 6 * 9 * (4 * 7 * 2 * 3 + 6)\r\n"
			+ "3 + 9\r\n"
			+ "2 + 6 * 7 * (8 * 3 * 5 + 7 * (7 * 8 * 6)) * 3\r\n"
			+ "5 + 6 + (8 * 4 * 7 + 2 + 4 * 5) * (3 * 9 + 3 + (3 * 2)) * 9\r\n"
			+ "4 + 7 * 7 * 2 * (2 * 6 + (9 + 4 + 8))\r\n"
			+ "4 + 4 * (7 * (5 + 3 + 8 * 6) + 9 + (4 * 7 + 9 + 3 + 4) + 6) + 5\r\n"
			+ "5 * (4 + 8 * (8 * 5 + 5 * 6 + 2) * (9 * 4 * 3)) + 6 + 5\r\n"
			+ "3 * ((3 + 5 * 7) + 8 * 2 * 5) + 5 + (3 + 7 * (5 * 9 + 3 + 7 + 7) * 2)\r\n"
			+ "2 + (5 * 7 + 9) + 2 + 2\r\n"
			+ "((3 * 9 + 6) + 7 + 7 + 8 * 6) + 5 + 5 + 9\r\n"
			+ "(8 + 3 * 6) * 7 + 2\r\n"
			+ "9 + (9 * 7 + 7 * 4 * 7 * (6 * 7 * 3)) + 3\r\n"
			+ "(3 + 7 + 7) + (5 + (2 * 9 * 3 * 2 * 5 * 3) + 7 * 5) + (7 + 9 + (2 + 7 * 7 * 7)) + (3 + 4) + 5 + (9 + (7 * 8 * 3 + 2 + 3 + 7) + 7)\r\n"
			+ "2 + 4 * (8 * 2 * (8 + 8 * 8 * 3 + 3 + 8) * 2) * 8 * 3\r\n"
			+ "9 + 4 * (5 + 7 * 4) + 2 * (3 + (9 + 3 * 7 + 5 + 5 + 6) + 4 * 7 + 5)\r\n"
			+ "5 + ((4 * 3 * 5) + (2 * 4 + 2 + 9) + 5 + 6 * 9 * 3) + 2 + 2\r\n"
			+ "((6 * 8 + 8 + 2) * 4) + 5 + 3 + 4 * 4 + 9\r\n"
			+ "7 * (9 + 7 + 4 * 6) + 5 * 6\r\n"
			+ "(7 + 7 * (7 + 8)) + 7 + 7\r\n"
			+ "9 * (5 + (7 * 6 * 9 + 5 * 3 * 3) * 2 * 4 * (5 + 8 * 8 + 4 * 9) + 3) + 2 + 6 * 4 + (9 + 7 + 2 + 4)\r\n"
			+ "4 + (7 * 6 + 5 + 7) + 8 + 8 * 4\r\n"
			+ "4 + (3 + 3 + 7 * 6 + 3) + (6 * (6 + 8 * 2 + 9 * 4) + 4) + 3\r\n"
			+ "((7 * 7) + 4 + 6 + (6 * 4 * 4 * 9 * 5 * 2)) * ((6 + 8 + 9 * 6) + (4 + 5 + 9 * 3) + (3 + 9) + 8)\r\n"
			+ "(7 + 7 + 6 + 6 * (2 + 2 * 7 * 9)) * 4 * 6 + 3 * (3 * (5 * 3 * 3 * 3 + 3) * (3 + 7 * 9) + 8 * 6 + 8) + 8\r\n"
			+ "(6 * 9 + 8 * 4 + 6) + 8 * 6\r\n"
			+ "8 + 2 * (9 * 2 * 7 + 9 * 8) + 2 * 3\r\n"
			+ "((7 + 7 + 8) + 6 * 7 * (6 + 3 * 7 + 7 * 9 * 4)) + 7 * 7 + 5 + 3\r\n"
			+ "7 * 2 + (8 * 8) * 8 * 5 * (5 * 2 * 2)\r\n"
			+ "(8 * 7 + 9) * 2 + 6 * 8 * 2 * 2\r\n"
			+ "9 + ((9 + 9 + 2 * 4 * 4 + 6) + 8 + (3 + 3 + 5 + 6 + 9) * 7) + 8 + 5 + 4 * 7\r\n"
			+ "4 + 7 * (5 * 4 + 7 * 7 + 6)\r\n"
			+ "(6 * 4 + 2) * 8\r\n"
			+ "3 * 7 * 8 + (5 * 9 + 2 + 2 + 4)\r\n"
			+ "(3 + (2 * 6) * 5 * 3 * 3 * 5) + (5 * 6 * 7)\r\n"
			+ "8 * 2 * 7 + (6 + 6 * (5 + 7)) * 8\r\n"
			+ "(2 + 8) + (9 + 9 * 5 + 2 * 8 + 7) + 7 + 9 + 6 + 3\r\n"
			+ "2 + ((4 * 7 + 5 + 6) + 2)\r\n"
			+ "4 + 4 * (3 * 7 * 4 * 6 + 3) * (8 + 5 + 5 * 6 + 6 + 7)\r\n"
			+ "9 * (9 * 9 + 6) * 8 + 7 + 9 * 7\r\n"
			+ "(7 + (5 * 8 + 2 + 2) * (8 * 3 * 4 * 3 + 4 + 2)) + (8 + 6 * (2 * 3)) + (7 + 6) + ((9 * 6 * 9 + 8) + 5 * 6 + 9) + 8 * 3\r\n"
			+ "(9 * 5 * 7 + (9 + 5) + (2 + 5 + 9 + 2 * 6 + 8)) * (7 + 6 + 3 + 4) + 8 + (2 * 8 + 7) * 2\r\n"
			+ "((5 * 6 + 2 + 3 * 9 + 5) + 4 + 8) * 7 + (3 * 7 * 2 * 4 + 3)\r\n"
			+ "4 + 2 * (3 * 5 * 3 + 4)\r\n"
			+ "(2 * 3 + (4 * 4 * 5) + (2 + 7) * 8 + 2) * 3\r\n"
			+ "5 + ((7 + 7) + (6 + 6) + 2 * 3) + 4 * ((9 * 2) * 3 + 3 + (4 + 8 * 7 + 3 * 6) * 6)\r\n"
			+ "((3 * 2 * 5) + 4 + 4 * 8) * (2 * (7 + 9 + 4 + 6)) + 7 * (9 + (9 + 6 * 4 + 6 + 2 * 4) * 3)\r\n"
			+ "4 * 3 * (9 + (8 + 5 + 6)) + 7 * 4 * ((4 + 2) * 9 + 6 * (5 + 4) * 6)\r\n"
			+ "4 + (7 + 7 * 6 + 3 * 9) * ((4 + 2 * 4 + 4 + 9 + 7) * 5 * 9 * (3 + 7 + 4 * 4) + (4 * 8 * 7)) + 3\r\n"
			+ "(2 + (5 * 8 + 3) * 9 + 5) * 9 * 7 + (6 + 2 * 8 * 2)\r\n"
			+ "9 * (8 + 8 + (4 + 4 + 2 + 7)) + 6 * 5\r\n"
			+ "6 * 9 + 2 * (8 * 5 * 5) * (2 + 4)\r\n"
			+ "3 * 3 + 4\r\n"
			+ "3 + 3 * ((4 * 4 * 4) + (2 * 5 * 9 * 4 + 4) * 9) * 9 * 5\r\n"
			+ "(3 + (5 + 7) + 4 + 4 * (4 * 2) + 3) + (3 + 6)\r\n"
			+ "6 * ((5 + 6 * 4 + 9 + 4 * 9) * (2 + 8)) * 6 + 8 * 6\r\n"
			+ "8 * ((2 * 3) + 9) + 2 * 6\r\n"
			+ "5 * (3 * 7 + (7 + 9 * 3 + 8 * 4) + 9 + 5) * 4\r\n"
			+ "4 * (5 + 2 + 3 * 2 + 4 + 9) * 4 * (2 + 6 * 2 * (4 + 9) * (8 + 6 + 4 * 4 + 7)) + 5\r\n"
			+ "7 * ((7 * 8 + 2 + 4 + 7) + 9 + 7 * 7 + 5) + 2 + 9 + 3 * 3\r\n"
			+ "(7 + 2 * 2 + (9 * 6 * 4)) * 8 * 9\r\n"
			+ "4 * (5 + 5 * 2 * (4 * 7) + (9 + 9 + 6 * 6 + 8 + 9) + 2) + 6 + 2\r\n"
			+ "2 + 6 + (7 + 9 * (3 * 4 * 3 * 5 * 7) + 7 + (7 + 5) + 2) + 5 * (7 + 9) + 9\r\n"
			+ "9 * (3 * (7 + 5) * 8 + 6) * 9 * 2\r\n"
			+ "2 * ((2 * 9 + 7) * 3 + (2 + 4 * 8) + 6 * 6)\r\n"
			+ "2 * 7 * ((6 + 7 * 5 * 3) + 9) + 9 + (8 * 8 * (9 * 2 + 2 + 3 + 3) + 2) * 2\r\n"
			+ "((8 + 7 * 5) * (2 + 7) * (7 * 8 * 9) * 6 * 2 + 5) + 8 + 6\r\n"
			+ "(7 + 3 + 5 + 6 + (7 * 9) + 2) * 5 * 7 + (2 + 5 * 3) + 8 + 4\r\n"
			+ "((5 + 6 * 8) + 4 * (5 + 6 + 5 * 4) + (5 + 8) + (5 * 6)) * 3 * (4 + 5 + 6 * 5 * 5 * 2) + 3 + (3 * 8 * (3 * 6) + 8 * (6 * 2 * 2 * 3 * 9 * 9) * 7) + 2\r\n"
			+ "3 * 3 * (9 * 2 + 7 + 9 * 5 * 7) * 9 * 3\r\n"
			+ "9 + 4 + (5 + 7 * 5)\r\n"
			+ "8 + (6 + 4 * 5 + 8 * 4) * 6 + (8 + (6 * 6 * 8 + 3 * 9) * 8) + 4 + 3\r\n"
			+ "(8 + 4 * 3 * 4 * (6 + 5) + 9) + 3 + 5 * 9 + 7\r\n"
			+ "(8 + 6 * 8 * 3) * 2 * 7 + 6 * (9 + 2)\r\n"
			+ "7 * 7 + (5 + 9 * 6) + 7 + (7 + (7 * 8 + 5 * 3 * 5 * 4) * (9 * 7)) + 5\r\n"
			+ "7 * 8\r\n"
			+ "5 * 6 * 4 + (3 + 4 * 6 * 6) + 3\r\n"
			+ "8 + ((4 + 2 * 6 + 2) + (7 * 9 + 9 + 7 * 6))\r\n"
			+ "6 + (6 * 8 + 6 + 5 + 6) * 5 * 9\r\n"
			+ "7 * ((8 * 6 + 3 * 7 * 9 + 2) * 4 + 5) * 8\r\n"
			+ "2 + 5 + (8 * 8 + 4 + 8) + 2\r\n"
			+ "4 + 3 + 7 + 5 * 8\r\n"
			+ "6 * 4 * (6 + 8 + (8 * 4 + 9) + 4 * (7 * 6 * 4) + 3)\r\n"
			+ "6 + 8 + (4 * (5 * 4) * 4 + (2 * 3)) * 4 + 3 * (2 * 9 * 5 * 4 * (8 + 3 * 3 + 8 * 7 + 9))\r\n"
			+ "5 + (7 * 3 * 6 + 3 * 2) * ((7 * 3 + 5 + 8) + (9 + 8 + 5 * 4 * 7)) + ((5 + 4 * 3) + 4 * 7) + 2 * (8 * (8 + 7 * 7 + 3 * 6) * 4 * 7 * 4 * 3)\r\n"
			+ "9 * (6 * 4 * 2 + (7 + 9 + 7 * 2) + 3 + (5 * 7 + 4)) + 6 * 2\r\n"
			+ "(5 * 2 + 7 * 2) + 9 * (3 * 4 * (5 * 2) + 4) * 4\r\n"
			+ "(2 * (6 + 9 + 4 + 3) * (9 * 6) * 2) * 8 * 5 * 5 + 6\r\n"
			+ "3 * 9 + 9 + 9 * (9 + (8 * 2 * 7 + 3 * 8 + 3)) + 3\r\n"
			+ "8 * 3 * 2 + (7 + (3 * 2 * 2)) * (2 * (2 * 4 * 4) * 8)\r\n"
			+ "3 + (9 * (7 + 9) + 6 * (3 + 4 + 5 + 5 * 2 + 9)) * (6 + 4 + (6 + 5 * 6 + 6 * 5) + 2 + 2 * 6)\r\n"
			+ "((7 * 3 * 3) + 7 + (3 * 4 + 5 * 4 + 7)) + 8 * 3 * 9 * ((7 * 3) + 8 + 7) * 9\r\n"
			+ "((2 * 3 + 2 + 9 + 4) + (9 * 2 * 4) * (6 * 5 + 9 * 2 * 7 + 7) * 7 * 9) * 6 * 4 * 5 + 7\r\n"
			+ "9 * 2 * 2 + 2 + (3 + 3 + 6 * 2)\r\n"
			+ "(7 * 6 * 6) * 2 + 9 + 8 * (7 + 3 + 8 * 7 + (4 + 5 + 3) + 8) + 9\r\n"
			+ "2 + 6 + 9 * 3 * (6 * 4 + 9 * 5 + 2)\r\n"
			+ "5 * (5 * 2 + 6 + 8 * 8 + 7) + 9 * 5 + 9 * 3\r\n"
			+ "9 * (8 + 9 + 8 + (9 * 6))\r\n"
			+ "(4 + 8 * 8 * 6 + 4) + 7\r\n"
			+ "2 + (8 * (4 * 2 + 6 + 2 + 3 + 6) + 4 * (7 + 4) + 6 * 2) + 8 * 5 * 6 * 8\r\n"
			+ "((5 * 7 * 9 * 5 * 8 * 3) * 5) + 5 * 2 * 3 * 7 + 5\r\n"
			+ "8 + 4 + 8 + 7\r\n"
			+ "3 + 3\r\n"
			+ "9 + ((4 + 7 + 8) + 3) + 8 + 9 * 5 * (6 * 5)\r\n"
			+ "(2 + 2) + 9 + 8 + 5 + 6 + 7\r\n"
			+ "3 + 8 * (7 * 5) + 9\r\n"
			+ "5 + (5 + (8 + 3 * 3 + 9 * 7 + 3)) * ((9 * 5 * 8 + 2 + 2 * 7) * 4 * 6 + 4 + 6 * 9)\r\n"
			+ "(6 + 5 + 6 * (9 * 2) * 6 * (4 * 5 + 8 * 9)) + 6\r\n"
			+ "2 * 4 + ((9 * 2 + 6 + 8) + 4 * (5 + 3 * 3 + 7 * 9 * 6) * (6 + 6 + 4 * 3 * 8) + 7) * 5\r\n"
			+ "(6 + 4 * 2 * (8 + 3 + 4 * 4 * 5)) * ((4 * 2 * 5 + 9) * 8 + 3 * 7 * 8) + 7\r\n"
			+ "((5 * 6) + (2 * 2 * 8)) * (3 * 4 * 2 * 3) * 6 + 5 + 7\r\n"
			+ "2 * 2 + ((5 + 6 * 7 + 5 * 8) * 7 * 7 * 4 + 8) + 6\r\n"
			+ "2 + (7 * 4 * 7 + 8 + (8 + 5 + 4 * 9)) * 8 * 2 * 6\r\n"
			+ "8 * 4 * ((2 * 8 * 9) * 9) * 8 + (8 + 2) + 9\r\n"
			+ "(5 * 9 * (8 + 7 * 3 + 9) * (4 * 6 + 5) * (7 + 2 * 6 + 5 * 2 * 2) * 4) + 5 + ((7 * 6 * 8) * 9 + 8)\r\n"
			+ "2 * 7 * (9 + (5 * 2 + 9) + 5 + 4 * 3 + 8) * 6 + (8 + 4 * 9 * 4 * 8 + 4) * ((9 + 6 + 2 * 4 * 8 + 3) * 7 * 8)\r\n"
			+ "(8 + 3 * 7 + 7 + 5 + 7) + (6 + 8 * 3 + 8 + 7 + 6) + (5 + 6 * 7 + 6 * 2 * 7) * 6 + 3\r\n"
			+ "8 * 5 + 7 + 5 + (2 + 4 * 5 + 2 * 5 * 8)\r\n"
			+ "3 + (8 * 5) + 4 * 2 + 7 + (6 * 7 * 8 * (4 * 5 * 5) + 2 + (4 * 8))\r\n"
			+ "5 * (7 * 5 * (5 * 4 * 5) + 4 + 4)\r\n"
			+ "5 * 9\r\n"
			+ "(5 * 9 + 5 * 4) + 4\r\n"
			+ "3 + 8 + 9 * (5 + 9 + 9 * 8) * (3 + 3 + 4 + 6 * 3 + 9) * 3\r\n"
			+ "(7 * 9 + 6 + (4 + 7 + 7 + 7) * 3) + 3 + 2 * 3 + 8 * 5\r\n"
			+ "6 + 6 * 6 + 8 * 9 * 6\r\n"
			+ "(8 + 6 * 5 * 4 * 4 + 3) * (8 + 6)\r\n"
			+ "2 + 9 * 2 + 3 * ((9 * 3 * 3 + 8 * 4 * 9) * 3 + 7 + 6 + (2 + 6) * 6)\r\n"
			+ "(5 * 6 + (2 * 3) + (6 + 8 * 6 * 9 + 7) + 6) + 8 * 3 + ((2 * 4) + 6 * (2 * 8) + (3 * 8 + 3) * 3) * 7\r\n"
			+ "4 + (2 + (8 * 5 + 5 * 9 * 7 + 5)) * 4 * 4 * 7 * 9\r\n"
			+ "7 + 8 + 6 * (8 + 3 + (9 * 2) + 8 + 8) + (4 + 2)\r\n"
			+ "(9 + 4) + (3 * 4) * 6\r\n"
			+ "((8 * 5) * 3 + 4) * 3 * 7\r\n"
			+ "8 * ((8 + 5 + 7 * 6 + 2) * 7 + 5 + 4 * (2 + 3 + 6 + 6)) * 3 * 5 * ((3 * 5) * 2)\r\n"
			+ "7 + 4 + 9 * (3 + 9 * 2 * 8 + (9 * 3)) + 9\r\n"
			+ "((8 * 8 * 3 + 9 * 4 + 7) + 8 * 7 + 6) + 5\r\n"
			+ "7 * 8 * 7 + 4 * (6 * 5 + 6) * 8\r\n"
			+ "3 * (8 * (4 + 8 + 4 + 9)) + 3 + (8 + (8 + 8 + 5 * 6) + 5) * 8 * 7\r\n"
			+ "9 + 4 + 9 * (7 + 9 + 2)\r\n"
			+ "4 * 9 * 3 + 3 * (3 + (7 * 2 * 7 * 7))\r\n"
			+ "(8 * (3 * 8 + 9 * 4 + 2 * 8)) * (2 + (5 * 3 * 6 * 5 + 3 * 4) + 8 + 2)\r\n"
			+ "6 + 7 * 9 * (7 * 3 * (8 + 2 * 9 * 3) * (4 + 7) * 9)\r\n"
			+ "7 + 3 + (6 + 3 + 9 + 6 + (4 * 9 * 5 + 7 * 9 + 7))\r\n"
			+ "3 * 6 + (5 * 7 * (9 + 6 * 8 + 8 * 8 * 5) + 5)\r\n"
			+ "4 * ((4 * 9 * 5 * 2) * 8) * (4 * (5 * 6 * 3 * 2) + 2) * 6 + 3 + 4\r\n"
			+ "9 + (6 + 4 + (8 + 7 + 9 * 3 * 6 * 8) * 6) + (2 * 8) + 5\r\n"
			+ "9 + 9 + 8 * 9 + 9 + 4\r\n"
			+ "((7 * 6 + 3 * 9) * 6 + 9 * (8 + 6 + 4 * 6 + 4 + 5) * (4 * 6 + 6 * 7 + 5 + 2) + 4) + 7 + 3 * 5\r\n"
			+ "((3 + 4 + 4 + 4 * 2) * 8 + 6 + 6 * (7 + 8 + 4)) + 5 * 6 + 7 + 3\r\n"
			+ "(9 + 8 * (7 * 9 * 3 + 5 * 6) * 7 * 9 * 3) * 4 * 7 * (9 * 9) + 5 + (5 * 2 * 7)\r\n"
			+ "8 + 3 * 9\r\n"
			+ "(4 * 6 + 3 + (2 + 7 + 5 * 3) + (4 + 9 + 6 * 5 + 4)) + (7 + 2 * 4 + 3 * 8 * 7) + 9 + 2 + 6\r\n"
			+ "9 + 9 * (2 * 8 * (3 + 3 * 4 * 2)) * 3\r\n"
			+ "6 + (2 + (4 * 3 + 8 + 5 * 3) + 8 + 2 * 6 + (8 + 4)) * 9 + 8 * 4\r\n"
			+ "(2 * 4 * (2 * 5 + 8 + 6) + (6 + 5 + 7 * 6 + 3 + 3) * 6 + 4) * 6 * 7 * 2 * 6\r\n"
			+ "6 * (9 + 8 + 2 * (4 * 5 + 5 * 9 * 2 + 7) * 4 * 5) * 3 * 6 + 8\r\n"
			+ "2 + 8 + 8 * (4 * (2 * 6 + 8 + 2 + 4 * 4)) * 7 + 6\r\n"
			+ "((8 * 6 + 2) + (4 * 5 + 6 + 2 + 3 + 9)) + (3 + 7) * 2 + 2\r\n"
			+ "7 + (4 * 8 * 7) * 8 + (2 * 2 * 3 * 4) + (2 + 7 + 9)\r\n"
			+ "(5 * 5 * (6 * 6 * 8 + 7) * 6) + 8 * (7 * (8 * 6 * 7)) * 6 * 5\r\n"
			+ "3 * 3 * (2 * 6) + 3 + (4 + 5 * 2 + 7 + 8 * 9) * 4\r\n"
			+ "6 * 8 * 6 + 4 * (5 * 2 * 6 + 4 + (7 + 9) + 7) + 3\r\n"
			+ "(8 * 7 * 3 * 6) * (7 + 7 + (7 * 2) + 8 * 3) + 7\r\n"
			+ "5 * (2 * 8 * 4 + 2 + 9)\r\n"
			+ "4 + 5 * 3\r\n"
			+ "3 + (5 * 8 * 6) * (8 * 5 * 5 * (3 * 7 * 5 + 6) + 6 + 2) + 2 * 5 + 4\r\n"
			+ "4 + 2 * (5 * 5 * 2) + (7 * 3 + 5 + 3 * 8)\r\n"
			+ "(4 + 7 + 4 + (6 + 7 + 7)) * (4 * 2 * 2 + (8 * 8 * 6 * 6 + 3)) * (8 + 8 * 5 * 2 * 8)\r\n"
			+ "5 + 2 * (2 * 4) * (2 * 6) + 4\r\n"
			+ "6 + 5 * (8 + 4) * 4 + 8 + 7\r\n"
			+ "4 * 3 + 7 * 4 * 5 + ((5 * 6 + 9 + 5) + 6 * (7 + 2 + 6 + 4) * 8 + (6 * 9 * 9) + 7)\r\n"
			+ "4 + ((9 * 8 * 2 * 8 + 8) + 5 * 3) * 8 * 2 + (5 + (2 + 7 + 3 * 4 * 8 + 2) + 4) + 8\r\n"
			+ "8 * (6 * 9) * 9 * ((5 * 2 + 2 + 8 * 2 + 3) + 9 * 8 * 7 * 3 + 8) + 6\r\n"
			+ "7 + (6 * 5 * 2 + 4 * 5 + (5 * 7 + 8 * 6 + 8)) + 2 + 8\r\n"
			+ "(8 * 6 * 3 * (2 + 4 * 6 + 2) * (5 + 9)) + 3 * 6 * (7 * 9)\r\n"
			+ "(4 + (2 + 6 * 6 + 4 * 9 * 9)) * ((2 * 7 * 3 * 9) + (6 * 5 + 8 + 5 + 9) * 8 + 5 + 4 + 5) + (9 + 8 * 8 * 5 * 5 + (9 * 6 * 5)) * 9\r\n"
			+ "9 * ((7 * 7) + 7 * 9 + 7 + 2) + 5 + 5 + 6\r\n"
			+ "5 + 7 + (2 + 4 + 8) * 3 + 3\r\n"
			+ "8 + (9 * (3 * 8 + 8 + 9) * (7 * 8 * 2 + 3 * 2 * 2) * 3 * 6 + 7) + 9 + 7 + 5 + 5\r\n"
			+ "(7 + 8 * 7) + 7 * ((5 + 4 * 9) * 7 + 6 + 6 + 7 + (3 + 9 * 6 * 3 + 3)) * 5 + 5\r\n"
			+ "(4 + 4 + 4 * 4 + 4 * 7) * 4 * ((3 * 4 * 6) + 5 + 2) + 6\r\n"
			+ "6 + (2 + 4 + 2 + 4) * 2\r\n"
			+ "6 + ((4 + 4 * 4 + 3 + 8) * 4 * 4 + 6) * 7 * 3 * 4\r\n"
			+ "6 * 5 + 2 + 7 + 8 * 6\r\n"
			+ "9 * 2 + (5 + 8 + 6 * 3 * 9 * 5) * 5\r\n"
			+ "8 * 7 + 5\r\n"
			+ "(8 * 8 * (7 + 8 + 4) * 8 * 2) + 3 * 4\r\n"
			+ "3 + ((9 * 7 * 4 * 3 + 4) + 8 + (3 * 4 * 7) * 5 + (3 * 5 + 7 + 2) + (4 + 9 + 9)) * 3 + 7\r\n"
			+ "(3 + 6) * 3 + 6 * (7 * 8 + (7 + 9 * 4) + 6) + 8\r\n"
			+ "9 + (2 + 8 + 3 * 9 * 4) + (8 * 9) + 7 + 2 + 2\r\n"
			+ "4 * ((9 * 3) + 2)\r\n"
			+ "7 + (7 + (9 * 3))\r\n"
			+ "6 * 4 + 5 * (4 + (4 + 5 + 4 + 9 + 3 * 2) + 9 + (6 * 2 * 4 * 6 * 8) + 3) + 9 * (6 + 5 + 9)\r\n"
			+ "4 * 6 * (3 * 6 * (3 * 5 * 4 + 9)) * ((3 + 6 + 4) + (7 * 2 * 5 * 9 + 4 + 4))\r\n"
			+ "((9 * 4 + 8 + 6 * 3 + 6) * 8 + 8 + 2 * 6 * (6 + 5 * 4)) * 5 + 6 + ((9 * 8 * 4) + 9 + 8 + 9 * 2 * 6) + 8\r\n"
			+ "7 + 8 * ((2 * 7) + 9 * 8 + 8 + 9) + 9\r\n"
			+ "(9 + 2 * 6 * (8 + 5 + 8 + 5) * 7) * (6 + 9 * 6 + 8 * 9 * 7)\r\n"
			+ "(7 + 5 + 8 * 4 + 8 + 5) + 5 * (3 * 2 + 7 + 5 + 8) * 9 * 6 * 8\r\n"
			+ "7 * 2 * 3 + 6 + (8 * (3 * 6) + 6 + (6 + 4 * 9 + 5 * 7 + 9))\r\n"
			+ "7 * (6 * (5 * 7) * 8 + 5) * (2 * 5 + 7 * 3 * 3) * 7 * 3 * (7 * 2 * 8)\r\n"
			+ "9 * 2 + 8 * (7 * 4 * 8 * 2 + 4 * (9 + 2 + 6)) + 2 + 7\r\n"
			+ "4 + (3 + 8 * 9 + 7) + 2 * 8 * 6 + (7 * 8)\r\n"
			+ "(3 * (2 + 6 * 2 + 9 * 5) * 9) + 4 + 2 * 7\r\n"
			+ "4 * 4 + 8 * 3 + 7\r\n"
			+ "(2 * 8 * (2 * 3 * 5 * 9 * 6 + 7) * 4 * 6 * 8) + 3\r\n"
			+ "2 * (9 * 7 + 5 + 4 + (3 + 7 + 6 + 8 + 5)) * 8 * (3 * 7 + 7) + 9\r\n"
			+ "8 + 9 + 7 * 9\r\n"
			+ "((3 * 2 * 5 * 6 * 7) + 6) * (3 * 9 * 4 * 4 + 6) * 2 + 8\r\n"
			+ "(4 + 3) * (3 * 9 * 4) + 5\r\n"
			+ "8 + 2 * 6 + 6\r\n"
			+ "(8 + 4 * 3 + 3) * (8 * (7 + 6 + 6) + 7 + (9 + 9 * 5)) * 8 + 2\r\n"
			+ "8 * 4 + 2 * 6 + 9 + ((7 * 5 + 5) + 2)\r\n"
			+ "(6 + 9 + 8) + ((4 * 3 + 9 * 6 + 3) * 3 + 3 * 4 * (5 + 5 + 6)) * 6 + 9 + 7 * (6 + 8 + 5 * 5)\r\n"
			+ "(6 + 9 + (5 + 2) * (9 * 4 * 5 + 9 + 3 + 9) + 3) * 8 + 8 * 7 + 3\r\n"
			+ "(9 * 6 + 9 * 7) + (5 * (7 + 6 * 7 + 2) + (6 + 8 + 9 + 4) + 2 * 4) + (2 + 6 + 4 + 7)\r\n"
			+ "4 + ((2 * 5 * 7 + 8 + 7 + 7) * 6 + (6 * 2 * 2 * 9) + 8) * 4 * 3 + 3 * 5\r\n"
			+ "5 + (8 + 8 * 2) + 3 + 5 + (7 * 8 * 9 + 2) * 2\r\n"
			+ "((5 + 7 * 7 * 6) * 9 * 2) * 3 * 2 + 9 + 7 * (6 + 4 + 6 + (5 * 8 * 2 + 8 + 2) + 9 * 7)\r\n"
			+ "7 * (2 + 3 + (5 * 9 + 8 * 9 * 5 + 4) + 4 * 8)\r\n"
			+ "(8 * 7 + 8 + 8) + 7 + (4 * 7) + 4 + 8\r\n"
			+ "6 + 6 + 4 * 8\r\n"
			+ "6 + 5 + 9 + 4 + 5 * (8 + 5 + 2 + 4 + 9 + 7)\r\n"
			+ "(2 * 9 + 3 + 7) * 9 * 7 + 8 + 9\r\n"
			+ "(2 + 7 * 3) + 7 + 8 * 4\r\n"
			+ "9 + (5 * 2) + 6 + 8 + ((5 + 2) + 7)\r\n"
			+ "8 * 9 * 6 * (9 + 9 + 4 * 8 + 7 * 5) + 7\r\n"
			+ "((3 * 9 + 6) * 2 + 2 + 6 * 6 * 6) + 4\r\n"
			+ "4 * 4 * 7 + 5 * 8 + 2\r\n"
			+ "9 * (3 + (3 + 7 + 6 * 3 * 8))\r\n"
			+ "6 * 6 * 9 * (3 * (5 + 9 * 9) * 8 + 9 * 8 + 2) + 4\r\n"
			+ "(3 * 9 * 4 * 8) + 5 + (9 * 5 * 5) + 7 + 2 * 4\r\n"
			+ "5 * 8 * 4 * (5 * 6 * 8) * 3 * (2 + 2)\r\n"
			+ "(8 + 6 + 3) + 7 + (5 + 9 * (9 + 7 + 4) * (2 * 5 * 6 * 8) + 4) * 5 + (9 * (5 + 6 + 6) * 8)\r\n"
			+ "7 + 2 * 4 + 7 * 3\r\n"
			+ "2 * 7 * 2 * (4 + 6 * (4 + 7) * 9 + (9 * 4 + 9 + 4))\r\n"
			+ "(8 + 6 * 4 + 9 * 7 + (7 * 9 + 5)) + 2 + 2\r\n"
			+ "3 + 2 * 3 + (2 + 6 + 6 + (8 * 9 + 4 + 9 + 8 + 9)) * (2 + 4 + 7 * 3 + 6 * 2)\r\n"
			+ "5 * 7 * ((7 + 9 * 8 * 7) + 8 + 9) * 5 * 7 * 2\r\n"
			+ "3 * (6 * 5) * 2 * 6\r\n"
			+ "6 * (4 * (2 * 2 + 2 + 3 + 7) * 7 + 9 * 6) + 3 + 6\r\n"
			+ "8 * 6 + (9 + 7) + 4 + ((4 * 2 + 9 * 2) + (5 * 5) + (7 + 5 + 6) * (5 * 5 * 8 + 8 * 5 * 5) + 6) + 4\r\n"
			+ "8 + 9 * 3 * 9 + ((9 + 3 + 8) + (8 + 8 + 3 * 3) * 2 * 3 * (4 * 9) * (6 * 6 + 9 + 3 + 4))\r\n"
			+ "5 * 3 * (6 * (9 + 5 * 8) * 9)\r\n"
			+ "9 * (9 * 4 + 4 + 7) + (6 * 4 * 6) * (3 * 8 * 3 + 4)\r\n"
			+ "(9 + 7 + 6 + 8 * 3) * 7 + (2 + 7) + (2 + 7 * (5 * 3 + 9) + (6 + 8 * 4 + 4 + 2 * 5))\r\n"
			+ "9 * ((8 * 5 * 5 + 5) * (2 + 7) * 9 + (4 + 5 + 3 + 2 * 5) + 2 + 5) + 9 * 4\r\n"
			+ "6 + ((2 * 6 * 8) * 3 * 4 + 3 + 7) + 8 + 2 + 7 + 3\r\n"
			+ "4 + (8 * 9 + 7 + 6) * (7 * 7 + 6 + 2 * (6 * 6 * 4 * 6 * 9) * 8) + 2\r\n"
			+ "(9 * (8 + 9 + 5 + 8) + 7 * 6 * (9 * 3 + 5 + 3 + 2)) + (2 + (2 + 4 * 5) + 6 * (6 * 3 + 7 + 7) + 2) + 7 + 8 + 6\r\n"
			+ "3 + 5 + 5 * 5 + ((6 * 7 + 9 + 4 * 2) * 6 * 8 + 6)\r\n"
			+ "(2 + 8) * 3 + 7 * 6\r\n"
			+ "4 + 5 + (8 * (5 * 8 + 4) * 9 + (6 * 6) + (5 + 7)) + 2\r\n"
			+ "6 * 7 + 5 + (9 * 2 + 2 * 7 * 4) * 2 + 2\r\n"
			+ "3 * (3 + (3 + 9) + 3 + 9 + 3) + 6 * 8 + 5 * 4\r\n"
			+ "8 + ((8 * 6 + 5 * 6) + 7 + 3 * 8 + 9 * (2 + 6 + 3 + 8 + 6))\r\n"
			+ "5 * 8 + (7 + (9 + 3 + 3) * 6 * 4) + 9\r\n"
			+ "2 + 4 + 5 * 2 * 9 * (4 + 9 * 3)\r\n"
			+ "2 * 6 + (4 * 7 + 6) + 9 + 9 + 4\r\n"
			+ "(7 * 9 * 4 + 3) + 9 + 6 * (7 + 6 * 8) + 9\r\n"
			+ "6 + (4 + (3 + 3 + 6 + 2) + (4 + 9 * 7 + 4 + 8) * 5 * 5) + 4\r\n"
			+ "4 * 7 + (2 + 2)\r\n"
			+ "(3 + 2 * 8 * 8 + 3 + 3) + 5 + 7 * 5\r\n"
			+ "(2 * 5 + (8 * 6 + 2 + 4 + 4 + 8)) * 2 * (8 + 8 * 5) + (2 + 9 * (9 * 3) * (6 * 7 + 7) * 2 + 4) * 6\r\n"
			+ "5 + 2 * 9 * 8 + 5 * ((7 * 8 + 3 * 6) + 2 * 6 + 2)\r\n"
			+ "7 * 2 + (8 * 5) * 7 + (2 + 2 + 4)\r\n"
			+ "5 * 6 + 8 * ((2 + 3 + 6 + 8 * 8) * 8 + 5)\r\n"
			+ "4 + 4 * 4 + (7 * 4)\r\n"
			+ "(7 * 3 * 4 * 8) + 3 * 2 + 8 + 2 + 3\r\n"
			+ "2 * 8 + (2 * 4 * 6 + 8) + 2 * 7\r\n"
			+ "(5 + (7 + 5) + 6 + (7 + 7 + 7 * 8 + 5 + 4) + (8 * 8)) + 8 * (7 * 9 + 8) * 6 + 3 * (9 + 6 * 3)\r\n"
			+ "9 * 9 + ((6 + 4 + 6 * 6) + 9 + 6) * (8 + 4 + 4 * (3 * 3 + 8) * 3 * 9) + 6 * 2\r\n"
			+ "(9 + (8 * 7 + 4 * 5 + 8 + 9)) * ((2 + 8 * 2 + 2) * 8 + 2) * 9 + (2 + 9) + (2 * 4 * (3 + 4 * 3 + 7 * 4 * 7))\r\n"
			+ "2 * 6 * 3 * 7 * (4 + 6 + 8)\r\n"
			+ "5 * 8 + (6 * 5 * 5 + 9 * (9 * 2 * 2 * 5 + 5 * 4)) + 4 * 2 + 8\r\n"
			+ "(9 + 7 + 5) + 2 + 9 + 2 + (6 * 9 * 9)\r\n"
			+ "9 + ((7 * 4) + 9 + (3 * 5)) * 8 * 6 * 6 * (3 + 3 + (8 * 9) + 7)\r\n"
			+ "5 + 4 + 3 + 3 * 9 * 5\r\n"
			+ "6 + 6 + ((5 + 4 + 6 + 9 * 5 + 4) * (8 * 9 * 8) + 3 + (8 + 2 * 4 + 4 + 3)) + 9\r\n"
			+ "3 + 5 * 4 * 3 * (5 * 3) + 9\r\n"
			+ "2 * 5 * 3 + 6 * (8 + (5 * 4 + 4 * 7 * 6 + 8) + 4 * 7) * 6\r\n"
			+ "2 * ((3 * 2) + 7 * 9 + 7 + 8 * 6) * (9 + 8) * 8 * 8\r\n"
			+ "3 * ((7 * 6 + 9) + (8 * 9 + 9 + 2 + 3)) * 5 + 2 + (3 * (6 * 6 + 7 * 9 + 8 * 9))\r\n"
			+ "3 * 3 + (8 + (8 * 6 * 9 * 8 + 5 + 3) + 5 * 2 * 5 + 7)\r\n"
			+ "3 + (6 + 5 * (4 * 2) + 8 * 3 + 6)\r\n"
			+ "7 + 7 + 7 * 6 + 3 * ((2 + 5 + 4 * 9 + 2 * 9) * 5 * (8 * 4) + (9 + 5 * 8 + 8 + 6) * 4 * 5)\r\n"
			+ "9 + (6 + 6 * (7 * 4 + 2 * 8 * 5))\r\n"
			+ "(7 + (5 + 3 + 5 + 6 * 5)) * 8 + 9 * 8 + 5\r\n"
			+ "(6 * 2 * 7) * (3 + 3 * 7 + (8 * 3 + 7 * 4 + 5)) + 7 * 3 + 4 + 2\r\n"
			+ "4 * 9 * 3 + (3 * (3 + 4) * 3) * (2 * 5) + (4 + 4 * 2 * 4 * 7)\r\n"
			+ "(8 + (6 * 7 + 5 * 3) + 5 * 4 + 7 * 8) * 3 + (6 * 9 + 7)\r\n"
			+ "5 * 6 * 5 + 4 * 9 + (3 + 3 + 8 + 4)\r\n"
			+ "(6 + 4 + 7 * 8) + 5 * 4 * 9\r\n"
			+ "8 + (7 + 5 * 4 + 8 + 9 * 6) * 8 + 4\r\n"
			+ "3 + 6 * 8 + 3 + (3 * 3 + 2 * 9) * 8\r\n"
			+ "7 + 6 * 4 + 4\r\n"
			+ "9 + 3 + ((2 + 8 * 5 * 5 + 2) * (8 * 7 + 7 * 3))\r\n"
			+ "9 * 9 * (6 + (2 * 9 + 4 * 8 + 6) * 2 + 5) + (7 * 3 * 7 * 4)\r\n"
			+ "4 * ((5 * 2 + 9) + 9) * 2 * 3 + (2 + (4 + 4 * 7) * 2 + 6)\r\n"
			+ "3 + 6 + (8 * 7 * (7 * 8) + 3) + 5\r\n"
			+ "(6 + (9 + 8 + 3 * 8 + 8 + 7) * (4 * 3 + 4 * 3) * 6 + (9 * 8 * 2)) * (6 * 5 + 4 * 4) * 6\r\n"
			+ "((9 * 3 + 3 * 5 * 9) * 3 * 2 * 5 * 4 + 9) + 2 * 5 + 5 * 8 * 6\r\n"
			+ "7 * 9 + 4 * ((3 + 7 + 2) + (8 + 7 + 9 * 8 * 6 * 2))\r\n"
			+ "(5 * (3 + 5) * 3 * (3 + 6 + 3 + 4) + 8 + 9) + 9 + 6 * 4\r\n"
			+ "3 + 9 * (3 + (4 + 7) + 2 + 3 + 7) * 8 * 6\r\n"
			+ "(5 * 7 + 4 + 7 + (5 + 4 * 4 * 6 + 6)) + (9 + 3 + 2 + 2) + ((3 + 2 + 9 + 7 * 2 * 3) + 8 * 2 * 2 + 9 * 3)\r\n"
			+ "3 + 7 + ((5 * 7) + 7 + 3 * (7 + 5 + 8) + (9 + 8 * 8) + 7)\r\n"
			+ "5 * ((5 + 8 * 3 * 7) + 2 * 7 * 5 + (4 + 8 + 3) + 3)\r\n"
			+ "(3 + 9 + 4) * ((3 * 6) + 5 * 7 * 6)\r\n"
			+ "8 * 7\r\n"
			+ "(5 * (2 + 9 + 4) + 8 * (8 + 7 * 7 + 5) + 6 * (2 + 4 * 7)) * 8 + 9\r\n"
			+ "(4 + (3 + 7 * 4 * 2 * 7 + 8)) * 9 * 6\r\n"
			+ "6 + 7 + 9 * (9 * 2 * 6) * 6 + 2\r\n"
			+ "7 * 5 + (5 * 3 + 9 * 6 + (9 * 5 * 2 * 3) + 7)\r\n"
			+ "3 * 5 + 7 + 2 + 3 * ((8 + 5 * 2 * 6 * 5) * (4 + 4 + 7 * 9 + 8 * 4) + (2 * 9 + 2 * 2 + 8))\r\n"
			+ "(9 + 7 * 9 * 2) + 8 * 6\r\n"
			+ "(9 * (7 + 8 + 9 + 5 + 5) * 2) * 3 + 5 + (7 * (6 * 8 + 9 * 4 * 4 + 8) + 6 + 6 * (9 + 8 + 4 + 6)) + 2\r\n"
			+ "(3 * 9) + 4 * 9\r\n"
			+ "4 + 7 * ((8 * 2 * 6 + 8 + 7 * 2) * 2)\r\n"
			+ "2 * (6 + 3) + 4 + 7 * 4\r\n"
			+ "(2 * 8 + 9) + (2 + 6) + (4 * 6)\r\n"
			+ "7 * 2 + 9 + 7 * 3 + ((5 * 5 * 3) + 3 * 8 * 6 + 2 + 7)\r\n"
			+ "((2 + 6) + (7 * 4 * 8 * 7 * 3) * (2 + 8 * 4) * 5 + 6 * 2) * (4 + 7 + 2 + 8 * (3 + 8) * 8) + (7 + 8 + 3 + 3) + 9 + 4\r\n"
			+ "(3 * 4 * (9 + 4 + 6 * 7) + 2 + 2 + 8) + 4 + 6\r\n"
			+ "(4 * (4 * 3 + 2 + 9) * 4) + 2 * 6 * 3 + 8 + 5\r\n"
			+ "(3 + 9 + 7) * 8 + 9 + (4 * (7 + 7 + 8 + 7) * 8 * 3 + 5)\r\n"
			+ "5 * 2 * (5 + 9 + 6 + (6 + 6) * 2 + 7)\r\n"
			+ "7 * 7 + (2 + 2 * 5 * 6 + 2) + 4\r\n"
			+ "8 * (2 + (9 * 2 + 2 + 7 + 7)) + 8 + 7 + 5 + 7\r\n"
			+ "(5 + (9 * 8 * 3) * (2 * 2 + 8 + 8 * 5) + 7 * 3 + (8 + 9 + 2 + 6 + 3 + 7)) * 9\r\n"
			+ "(4 + 8 + 9) + (6 + 3 * 4 * (4 + 2 + 4 * 2 + 8 + 2) + 8 * 3) + 5\r\n"
			+ "6 + 3 + 2 + (2 + 6 + 7 + 2 + (7 + 3 * 9 + 3 * 5))\r\n"
			+ "4 + 7 * 2 + 8 * 2\r\n"
			+ "7 * 6 + 4\r\n"
			+ "(2 * (5 * 3) * 9 * 3) * (3 + 7 + 6 * 5) * 4 * 9\r\n"
			+ "3 + 9 * 2 + (8 * 4 + 8 * (3 + 3 + 2 * 3) + (9 + 5 * 8 * 6))\r\n"
			+ "8 * (8 * 2 + 4 * 4 * 6) * 9 + 5 + 4\r\n"
			+ "2 + 8 + (4 * 7 + (2 * 9 * 2 + 4 * 5 + 7) * 9 * 8 * 3) * 5 + 7 * 3\r\n"
			+ "8 * 5 + 7 * 5 + (7 * (5 + 8) * 5 * (3 * 7 * 2 * 3 + 2)) + 5\r\n"
			+ "8 * (2 * (5 + 3 * 6)) + 2 * ((7 * 6 * 7 + 2 * 2) + 8) * 6\r\n"
			+ "((9 + 8 + 7 * 6 * 7 * 9) + (9 + 6 * 4 + 9 * 4 + 2) * (6 + 4 + 6 + 9 * 4)) * 7 * 8 * ((8 * 4 * 9 * 5 + 6 * 6) + 7 * 3 * 3 * (2 + 4 * 4))\r\n"
			+ "4 + (8 * 7 * (9 + 6 * 8 + 8) * 7 * 4) + 2 * ((4 * 4 + 7 * 9 * 8 + 3) + 7 + 3 * 9 * 3) + 6\r\n"
			+ "6 + ((5 * 2 + 9 + 9 + 7 * 7) * (2 + 9 + 6 * 8) + 9) * 3\r\n"
			+ "(6 + 6 + 9 * (8 * 5 * 3 + 3 + 2) * 8) * 5 + 8 * (3 + 6 + 8 * 9 + (5 + 3 + 7)) * 5\r\n"
			+ "8 * ((8 + 3 + 5) + 5 * 4 * 6) * ((7 * 3 * 2 * 7 + 8 + 8) * 7 + 9 * 5 + 2) * 8\r\n"
			+ "9 * ((6 + 3 + 3) + 4 * 3) + 6\r\n"
			+ "9 + ((9 * 8 + 3 + 5 + 6 + 3) * (7 * 5 * 6 + 5 + 6) * 5 + 8) * 4 + 8 + 6\r\n"
			+ "2 * 4 * 2 * (8 + (7 * 5) + 8 * 3) * 7\r\n"
			+ "8 + (6 * 8) * 9 * 2 + 3 * 7\r\n"
			+ "(4 * 3 * 2 + 8) * (8 + (5 * 2 * 7) + 5 + (6 + 8 * 4 * 9 + 5 + 5) * 4) * 2 * 3 * 2 + 5\r\n"
			+ "9 + 5 * 9 + (3 + 4) + (5 * 6 + 5)\r\n"
			+ "9 * 9 * ((9 * 9) * 5 * 6 + 4 + 3) + 8 + 8 + (4 + 4 * 4 * (3 * 7 + 7 + 9 + 5 * 3))\r\n"
			+ "9 + (3 * 2) + 2\r\n"
			+ "((3 + 7 + 5 * 8) + 3 * 5 + 2 + 2) * (5 + 7 + 5) * (2 * 3 + 8 + 8 * (9 * 3 + 6 + 7 * 7))\r\n"
			+ "((8 + 3 + 2) * 9) * 5 * 9 * 8 * 3 + 8\r\n"
			+ "2 + 8 + 4 + 2 * 2\r\n"
			+ "(8 * 9) + 9\r\n"
			+ "6 + (4 * 8)\r\n"
			+ "(5 + 9 * 7) * 9 + ((9 + 9) + 6 + 3 + 8) * (9 + 9 * (6 + 9))\r\n"
			+ "((6 * 6 + 8 * 6) + 2 * (6 * 6) * (3 * 9 + 7 + 9 * 8) + 3) * (8 * (2 + 7 + 9 * 8) * 2) + 4 + 7 * 6\r\n"
			+ "7 * (7 * 3 * 9 + 7) + (4 * 9 + (5 + 3 + 5) * 7) + (5 + 3 * 3 + 2) * 2\r\n"
			+ "(6 * (2 * 7 * 3)) + 5\r\n"
			+ "8 * ((7 * 4 * 4 * 3) * 3 * 5 + 6 + (2 * 5 + 5 + 2 * 8) * 9)";
	
	@Override
	public String part1() {
		long sum = 0;
		for(String s : input.split("\r\n")) {
			while(s.contains("+") || s.contains("*")) {
				//find either first index of deepest parenthesis, or start at first index of string
				int index = -1;
				int parenthesisDepth = 0;
				int highestDepth = 0;
				for(int i = 0; i < s.length(); i++) {
					char c = s.charAt(i);
					if(c == '(') {
						parenthesisDepth++;
						if(parenthesisDepth > highestDepth) {
							highestDepth = parenthesisDepth;
							index = i;
						}
					} else if(c == ')') {
						parenthesisDepth--;
					}
				}
				//pad index by one to skip parenthesis
				index++;
				
				
				
				//operator is always character after first space
				int operatorIndex = s.indexOf(' ',index) + 1;
				
				//endIndex is either index of close parenthesis or index of space, starting from operator + 2
				int closeIndex = s.indexOf(')',operatorIndex + 2);
				int spaceIndex = s.indexOf(' ',operatorIndex + 2);
				
				//if neither close or space is present, end index will be end of string
				int endIndex = Math.min((closeIndex != -1 ? closeIndex : s.length()),(spaceIndex != -1 ? spaceIndex : s.length()));
				
				//extract expression
				String expression = s.substring(index,endIndex);
				
				String[] expParts = expression.split(" ");
				
				long result = -1;
				if(expParts[1].equals("+")) {
					result = Long.parseLong(expParts[0]) + Long.parseLong(expParts[2]);
				} else {
					result = Long.parseLong(expParts[0]) * Long.parseLong(expParts[2]);
				}
				
				//replace expression in s with result
				s = s.substring(0,index) + result + s.substring(endIndex);
				
				//handle case where lone number is inside parenthesis
				//replace (digits) with digits
				s = s.replaceAll("\\(([0-9]*)\\)", "$1");
			}
			//add line value to total
			sum += Long.parseLong(s);
		}
		return Long.toString(sum);
	}

	@Override
	public String part2() {	
		long total = 0;
		for(String line : input.split("\r\n")) {
			while(line.contains("+") || line.contains("*")) {
				//if parenthesis present, operate on deepest portion first
				int index = -1;
				int parenthesisDepth = 0;
				int highestDepth = 0;
				for(int i = 0; i < line.length(); i++) {
					char c = line.charAt(i);
					if(c == '(') {
						parenthesisDepth++;
						if(parenthesisDepth > highestDepth) {
							highestDepth = parenthesisDepth;
							index = i;
						}
					} else if(c == ')') {
						parenthesisDepth--;
					}
				}
				
				index++;
				
				//if no parentheses, index will be zero, and end index will be end of line
				int endParIndex = line.indexOf(')',index);
				if(endParIndex == -1)
					endParIndex = line.length();
				
				//replace selected portion with evaluation
				line = line.substring(0,index) + evaluate(line.substring(index,endParIndex)) + line.substring(endParIndex); 
				
				//handle parenthesis case mentioned above
				line = line.replaceAll("\\(([0-9]*)\\)", "$1");
			}
			
			total += Long.parseLong(line);
		}
		return Long.toString(total);
	}

	static Pattern addPattern = Pattern.compile("[0-9]+ \\+ [0-9]+");
	
	static Pattern mulPattern = Pattern.compile("[0-9]+ \\* [0-9]+");
	
	//evaluate string s for the given rules, performing first available addition, or first available multiplication if no addition until string is resolved
	//this method always recieves deepest parenthesised section, so does not have to worry about parenthesis being present
	public String evaluate(String s) {
		loop:
		while(s.contains("+") || s.contains("*")) {
			//if parenthesis present, operate on deepest portion first
			
			Matcher add = addPattern.matcher(s);
			if(add.find()) {
				String[] exp = s.substring(add.start(),add.end()).split(" ");
				long result = Long.parseLong(exp[0]) + Long.parseLong(exp[2]);
				s = s.substring(0,add.start()) + result + s.substring(add.end());
				
				//handle parenthesis case
				s = s.replaceAll("\\(([0-9]*)\\)", "$1");
				continue loop;
			}
			Matcher mul = mulPattern.matcher(s);
			if(mul.find()) {
				String[] exp = s.substring(mul.start(),mul.end()).split(" ");
				long result = Long.parseLong(exp[0]) * Long.parseLong(exp[2]);
				s = s.substring(0,mul.start()) + result + s.substring(mul.end());
				
				//handle parenthesis case
				s = s.replaceAll("\\(([0-9]*)\\)", "$1");
			}
		}
		return s;	
	}
	
	public static void main(String[] args) {
		DayRunner.run(new Day18());
	}

}
