package advent.aoc2015;

import advent.utilities.general.DayRunner;
import advent.utilities.general.IDay;
import advent.utilities.utils2015.Wire;

public class Day07 implements IDay {

	String input = "lf AND lq -> ls\r\n"
			+ "iu RSHIFT 1 -> jn\r\n"
			+ "bo OR bu -> bv\r\n"
			+ "gj RSHIFT 1 -> hc\r\n"
			+ "et RSHIFT 2 -> eu\r\n"
			+ "bv AND bx -> by\r\n"
			+ "is OR it -> iu\r\n"
			+ "b OR n -> o\r\n"
			+ "gf OR ge -> gg\r\n"
			+ "NOT kt -> ku\r\n"
			+ "ea AND eb -> ed\r\n"
			+ "kl OR kr -> ks\r\n"
			+ "hi AND hk -> hl\r\n"
			+ "au AND av -> ax\r\n"
			+ "lf RSHIFT 2 -> lg\r\n"
			+ "dd RSHIFT 3 -> df\r\n"
			+ "eu AND fa -> fc\r\n"
			+ "df AND dg -> di\r\n"
			+ "ip LSHIFT 15 -> it\r\n"
			+ "NOT el -> em\r\n"
			+ "et OR fe -> ff\r\n"
			+ "fj LSHIFT 15 -> fn\r\n"
			+ "t OR s -> u\r\n"
			+ "ly OR lz -> ma\r\n"
			+ "ko AND kq -> kr\r\n"
			+ "NOT fx -> fy\r\n"
			+ "et RSHIFT 1 -> fm\r\n"
			+ "eu OR fa -> fb\r\n"
			+ "dd RSHIFT 2 -> de\r\n"
			+ "NOT go -> gp\r\n"
			+ "kb AND kd -> ke\r\n"
			+ "hg OR hh -> hi\r\n"
			+ "jm LSHIFT 1 -> kg\r\n"
			+ "NOT cn -> co\r\n"
			+ "jp RSHIFT 2 -> jq\r\n"
			+ "jp RSHIFT 5 -> js\r\n"
			+ "1 AND io -> ip\r\n"
			+ "eo LSHIFT 15 -> es\r\n"
			+ "1 AND jj -> jk\r\n"
			+ "g AND i -> j\r\n"
			+ "ci RSHIFT 3 -> ck\r\n"
			+ "gn AND gp -> gq\r\n"
			+ "fs AND fu -> fv\r\n"
			+ "lj AND ll -> lm\r\n"
			+ "jk LSHIFT 15 -> jo\r\n"
			+ "iu RSHIFT 3 -> iw\r\n"
			+ "NOT ii -> ij\r\n"
			+ "1 AND cc -> cd\r\n"
			+ "bn RSHIFT 3 -> bp\r\n"
			+ "NOT gw -> gx\r\n"
			+ "NOT ft -> fu\r\n"
			+ "jn OR jo -> jp\r\n"
			+ "iv OR jb -> jc\r\n"
			+ "hv OR hu -> hw\r\n"
			+ "19138 -> b\r\n"
			+ "gj RSHIFT 5 -> gm\r\n"
			+ "hq AND hs -> ht\r\n"
			+ "dy RSHIFT 1 -> er\r\n"
			+ "ao OR an -> ap\r\n"
			+ "ld OR le -> lf\r\n"
			+ "bk LSHIFT 1 -> ce\r\n"
			+ "bz AND cb -> cc\r\n"
			+ "bi LSHIFT 15 -> bm\r\n"
			+ "il AND in -> io\r\n"
			+ "af AND ah -> ai\r\n"
			+ "as RSHIFT 1 -> bl\r\n"
			+ "lf RSHIFT 3 -> lh\r\n"
			+ "er OR es -> et\r\n"
			+ "NOT ax -> ay\r\n"
			+ "ci RSHIFT 1 -> db\r\n"
			+ "et AND fe -> fg\r\n"
			+ "lg OR lm -> ln\r\n"
			+ "k AND m -> n\r\n"
			+ "hz RSHIFT 2 -> ia\r\n"
			+ "kh LSHIFT 1 -> lb\r\n"
			+ "NOT ey -> ez\r\n"
			+ "NOT di -> dj\r\n"
			+ "dz OR ef -> eg\r\n"
			+ "lx -> a\r\n"
			+ "NOT iz -> ja\r\n"
			+ "gz LSHIFT 15 -> hd\r\n"
			+ "ce OR cd -> cf\r\n"
			+ "fq AND fr -> ft\r\n"
			+ "at AND az -> bb\r\n"
			+ "ha OR gz -> hb\r\n"
			+ "fp AND fv -> fx\r\n"
			+ "NOT gb -> gc\r\n"
			+ "ia AND ig -> ii\r\n"
			+ "gl OR gm -> gn\r\n"
			+ "0 -> c\r\n"
			+ "NOT ca -> cb\r\n"
			+ "bn RSHIFT 1 -> cg\r\n"
			+ "c LSHIFT 1 -> t\r\n"
			+ "iw OR ix -> iy\r\n"
			+ "kg OR kf -> kh\r\n"
			+ "dy OR ej -> ek\r\n"
			+ "km AND kn -> kp\r\n"
			+ "NOT fc -> fd\r\n"
			+ "hz RSHIFT 3 -> ib\r\n"
			+ "NOT dq -> dr\r\n"
			+ "NOT fg -> fh\r\n"
			+ "dy RSHIFT 2 -> dz\r\n"
			+ "kk RSHIFT 2 -> kl\r\n"
			+ "1 AND fi -> fj\r\n"
			+ "NOT hr -> hs\r\n"
			+ "jp RSHIFT 1 -> ki\r\n"
			+ "bl OR bm -> bn\r\n"
			+ "1 AND gy -> gz\r\n"
			+ "gr AND gt -> gu\r\n"
			+ "db OR dc -> dd\r\n"
			+ "de OR dk -> dl\r\n"
			+ "as RSHIFT 5 -> av\r\n"
			+ "lf RSHIFT 5 -> li\r\n"
			+ "hm AND ho -> hp\r\n"
			+ "cg OR ch -> ci\r\n"
			+ "gj AND gu -> gw\r\n"
			+ "ge LSHIFT 15 -> gi\r\n"
			+ "e OR f -> g\r\n"
			+ "fp OR fv -> fw\r\n"
			+ "fb AND fd -> fe\r\n"
			+ "cd LSHIFT 15 -> ch\r\n"
			+ "b RSHIFT 1 -> v\r\n"
			+ "at OR az -> ba\r\n"
			+ "bn RSHIFT 2 -> bo\r\n"
			+ "lh AND li -> lk\r\n"
			+ "dl AND dn -> do\r\n"
			+ "eg AND ei -> ej\r\n"
			+ "ex AND ez -> fa\r\n"
			+ "NOT kp -> kq\r\n"
			+ "NOT lk -> ll\r\n"
			+ "x AND ai -> ak\r\n"
			+ "jp OR ka -> kb\r\n"
			+ "NOT jd -> je\r\n"
			+ "iy AND ja -> jb\r\n"
			+ "jp RSHIFT 3 -> jr\r\n"
			+ "fo OR fz -> ga\r\n"
			+ "df OR dg -> dh\r\n"
			+ "gj RSHIFT 2 -> gk\r\n"
			+ "gj OR gu -> gv\r\n"
			+ "NOT jh -> ji\r\n"
			+ "ap LSHIFT 1 -> bj\r\n"
			+ "NOT ls -> lt\r\n"
			+ "ir LSHIFT 1 -> jl\r\n"
			+ "bn AND by -> ca\r\n"
			+ "lv LSHIFT 15 -> lz\r\n"
			+ "ba AND bc -> bd\r\n"
			+ "cy LSHIFT 15 -> dc\r\n"
			+ "ln AND lp -> lq\r\n"
			+ "x RSHIFT 1 -> aq\r\n"
			+ "gk OR gq -> gr\r\n"
			+ "NOT kx -> ky\r\n"
			+ "jg AND ji -> jj\r\n"
			+ "bn OR by -> bz\r\n"
			+ "fl LSHIFT 1 -> gf\r\n"
			+ "bp OR bq -> br\r\n"
			+ "he OR hp -> hq\r\n"
			+ "et RSHIFT 5 -> ew\r\n"
			+ "iu RSHIFT 2 -> iv\r\n"
			+ "gl AND gm -> go\r\n"
			+ "x OR ai -> aj\r\n"
			+ "hc OR hd -> he\r\n"
			+ "lg AND lm -> lo\r\n"
			+ "lh OR li -> lj\r\n"
			+ "da LSHIFT 1 -> du\r\n"
			+ "fo RSHIFT 2 -> fp\r\n"
			+ "gk AND gq -> gs\r\n"
			+ "bj OR bi -> bk\r\n"
			+ "lf OR lq -> lr\r\n"
			+ "cj AND cp -> cr\r\n"
			+ "hu LSHIFT 15 -> hy\r\n"
			+ "1 AND bh -> bi\r\n"
			+ "fo RSHIFT 3 -> fq\r\n"
			+ "NOT lo -> lp\r\n"
			+ "hw LSHIFT 1 -> iq\r\n"
			+ "dd RSHIFT 1 -> dw\r\n"
			+ "dt LSHIFT 15 -> dx\r\n"
			+ "dy AND ej -> el\r\n"
			+ "an LSHIFT 15 -> ar\r\n"
			+ "aq OR ar -> as\r\n"
			+ "1 AND r -> s\r\n"
			+ "fw AND fy -> fz\r\n"
			+ "NOT im -> in\r\n"
			+ "et RSHIFT 3 -> ev\r\n"
			+ "1 AND ds -> dt\r\n"
			+ "ec AND ee -> ef\r\n"
			+ "NOT ak -> al\r\n"
			+ "jl OR jk -> jm\r\n"
			+ "1 AND en -> eo\r\n"
			+ "lb OR la -> lc\r\n"
			+ "iu AND jf -> jh\r\n"
			+ "iu RSHIFT 5 -> ix\r\n"
			+ "bo AND bu -> bw\r\n"
			+ "cz OR cy -> da\r\n"
			+ "iv AND jb -> jd\r\n"
			+ "iw AND ix -> iz\r\n"
			+ "lf RSHIFT 1 -> ly\r\n"
			+ "iu OR jf -> jg\r\n"
			+ "NOT dm -> dn\r\n"
			+ "lw OR lv -> lx\r\n"
			+ "gg LSHIFT 1 -> ha\r\n"
			+ "lr AND lt -> lu\r\n"
			+ "fm OR fn -> fo\r\n"
			+ "he RSHIFT 3 -> hg\r\n"
			+ "aj AND al -> am\r\n"
			+ "1 AND kz -> la\r\n"
			+ "dy RSHIFT 5 -> eb\r\n"
			+ "jc AND je -> jf\r\n"
			+ "cm AND co -> cp\r\n"
			+ "gv AND gx -> gy\r\n"
			+ "ev OR ew -> ex\r\n"
			+ "jp AND ka -> kc\r\n"
			+ "fk OR fj -> fl\r\n"
			+ "dy RSHIFT 3 -> ea\r\n"
			+ "NOT bs -> bt\r\n"
			+ "NOT ag -> ah\r\n"
			+ "dz AND ef -> eh\r\n"
			+ "cf LSHIFT 1 -> cz\r\n"
			+ "NOT cv -> cw\r\n"
			+ "1 AND cx -> cy\r\n"
			+ "de AND dk -> dm\r\n"
			+ "ck AND cl -> cn\r\n"
			+ "x RSHIFT 5 -> aa\r\n"
			+ "dv LSHIFT 1 -> ep\r\n"
			+ "he RSHIFT 2 -> hf\r\n"
			+ "NOT bw -> bx\r\n"
			+ "ck OR cl -> cm\r\n"
			+ "bp AND bq -> bs\r\n"
			+ "as OR bd -> be\r\n"
			+ "he AND hp -> hr\r\n"
			+ "ev AND ew -> ey\r\n"
			+ "1 AND lu -> lv\r\n"
			+ "kk RSHIFT 3 -> km\r\n"
			+ "b AND n -> p\r\n"
			+ "NOT kc -> kd\r\n"
			+ "lc LSHIFT 1 -> lw\r\n"
			+ "km OR kn -> ko\r\n"
			+ "id AND if -> ig\r\n"
			+ "ih AND ij -> ik\r\n"
			+ "jr AND js -> ju\r\n"
			+ "ci RSHIFT 5 -> cl\r\n"
			+ "hz RSHIFT 1 -> is\r\n"
			+ "1 AND ke -> kf\r\n"
			+ "NOT gs -> gt\r\n"
			+ "aw AND ay -> az\r\n"
			+ "x RSHIFT 2 -> y\r\n"
			+ "ab AND ad -> ae\r\n"
			+ "ff AND fh -> fi\r\n"
			+ "ci AND ct -> cv\r\n"
			+ "eq LSHIFT 1 -> fk\r\n"
			+ "gj RSHIFT 3 -> gl\r\n"
			+ "u LSHIFT 1 -> ao\r\n"
			+ "NOT bb -> bc\r\n"
			+ "NOT hj -> hk\r\n"
			+ "kw AND ky -> kz\r\n"
			+ "as AND bd -> bf\r\n"
			+ "dw OR dx -> dy\r\n"
			+ "br AND bt -> bu\r\n"
			+ "kk AND kv -> kx\r\n"
			+ "ep OR eo -> eq\r\n"
			+ "he RSHIFT 1 -> hx\r\n"
			+ "ki OR kj -> kk\r\n"
			+ "NOT ju -> jv\r\n"
			+ "ek AND em -> en\r\n"
			+ "kk RSHIFT 5 -> kn\r\n"
			+ "NOT eh -> ei\r\n"
			+ "hx OR hy -> hz\r\n"
			+ "ea OR eb -> ec\r\n"
			+ "s LSHIFT 15 -> w\r\n"
			+ "fo RSHIFT 1 -> gh\r\n"
			+ "kk OR kv -> kw\r\n"
			+ "bn RSHIFT 5 -> bq\r\n"
			+ "NOT ed -> ee\r\n"
			+ "1 AND ht -> hu\r\n"
			+ "cu AND cw -> cx\r\n"
			+ "b RSHIFT 5 -> f\r\n"
			+ "kl AND kr -> kt\r\n"
			+ "iq OR ip -> ir\r\n"
			+ "ci RSHIFT 2 -> cj\r\n"
			+ "cj OR cp -> cq\r\n"
			+ "o AND q -> r\r\n"
			+ "dd RSHIFT 5 -> dg\r\n"
			+ "b RSHIFT 2 -> d\r\n"
			+ "ks AND ku -> kv\r\n"
			+ "b RSHIFT 3 -> e\r\n"
			+ "d OR j -> k\r\n"
			+ "NOT p -> q\r\n"
			+ "NOT cr -> cs\r\n"
			+ "du OR dt -> dv\r\n"
			+ "kf LSHIFT 15 -> kj\r\n"
			+ "NOT ac -> ad\r\n"
			+ "fo RSHIFT 5 -> fr\r\n"
			+ "hz OR ik -> il\r\n"
			+ "jx AND jz -> ka\r\n"
			+ "gh OR gi -> gj\r\n"
			+ "kk RSHIFT 1 -> ld\r\n"
			+ "hz RSHIFT 5 -> ic\r\n"
			+ "as RSHIFT 2 -> at\r\n"
			+ "NOT jy -> jz\r\n"
			+ "1 AND am -> an\r\n"
			+ "ci OR ct -> cu\r\n"
			+ "hg AND hh -> hj\r\n"
			+ "jq OR jw -> jx\r\n"
			+ "v OR w -> x\r\n"
			+ "la LSHIFT 15 -> le\r\n"
			+ "dh AND dj -> dk\r\n"
			+ "dp AND dr -> ds\r\n"
			+ "jq AND jw -> jy\r\n"
			+ "au OR av -> aw\r\n"
			+ "NOT bf -> bg\r\n"
			+ "z OR aa -> ab\r\n"
			+ "ga AND gc -> gd\r\n"
			+ "hz AND ik -> im\r\n"
			+ "jt AND jv -> jw\r\n"
			+ "z AND aa -> ac\r\n"
			+ "jr OR js -> jt\r\n"
			+ "hb LSHIFT 1 -> hv\r\n"
			+ "hf OR hl -> hm\r\n"
			+ "ib OR ic -> id\r\n"
			+ "fq OR fr -> fs\r\n"
			+ "cq AND cs -> ct\r\n"
			+ "ia OR ig -> ih\r\n"
			+ "dd OR do -> dp\r\n"
			+ "d AND j -> l\r\n"
			+ "ib AND ic -> ie\r\n"
			+ "as RSHIFT 3 -> au\r\n"
			+ "be AND bg -> bh\r\n"
			+ "dd AND do -> dq\r\n"
			+ "NOT l -> m\r\n"
			+ "1 AND gd -> ge\r\n"
			+ "y AND ae -> ag\r\n"
			+ "fo AND fz -> gb\r\n"
			+ "NOT ie -> if\r\n"
			+ "e AND f -> h\r\n"
			+ "x RSHIFT 3 -> z\r\n"
			+ "y OR ae -> af\r\n"
			+ "hf AND hl -> hn\r\n"
			+ "NOT h -> i\r\n"
			+ "NOT hn -> ho\r\n"
			+ "he RSHIFT 5 -> hh";
	
	//buffer part 1 result for part 2 usage
	static String part1;
	
	@Override
	public String part1() {
		//parse input into wires
		for(String s : input.split("\r\n")) {
			String[] parts = s.split(" ");
			//determine wire type based on number of parameters
			//direct input
			if(parts.length == 3) {
				//destination wire, number/source
				Wire.wires.add(new Wire(parts[2],parts[0]));
			//NOT operation
			} else if(parts.length == 4) {
				//destination wire, operation, input 1, (nonpresent input 2)
				Wire.wires.add(new Wire(parts[3],parts[0],parts[1],null));
			//2-input operation
			} else {
				//destination wire, operation, input 1, input 2
				Wire.wires.add(new Wire(parts[4], parts[1], parts[0], parts[2]));
			}
		}
		//then, just calculate result of wire a. result method will subcalculate other wires as needed
		part1 = Integer.toString(Wire.find("a").result());
		return part1;
	}

	@Override
	public String part2() {
		//reinitialize all wires
		Wire.wires.clear();
		for(String s : input.split("\r\n")) {
			String[] parts = s.split(" ");
			//direct input
			if(parts.length == 3) {
				//destination wire, result/source
				Wire.wires.add(new Wire(parts[2],parts[0]));
			//NOT operation
			} else if(parts.length == 4) {
				//destination wire, operation, input 1, nonpresent input 2
				Wire.wires.add(new Wire(parts[3],parts[0],parts[1],null));
			//2-input operation
			} else {
				//destination wire, operation, input 1, input 2
				Wire.wires.add(new Wire(parts[4], parts[1], parts[0], parts[2]));
			}
		}
		//update wire b with cached part 1 value
		Wire.wires.remove(Wire.find("b"));
		Wire.wires.add(new Wire("b",part1));
		//then, recalculate a and return
		return Integer.toString(Wire.find("a").result());
	}

	public static void main(String[] args) {
		DayRunner.run(new Day07());
	}

}

